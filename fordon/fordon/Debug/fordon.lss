
fordon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800100  00001a82  00001b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025f  00800290  00800290  00001ca6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034a7  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012df  00000000  00000000  00005513  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001da2  00000000  00000000  000067f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000704  00000000  00000000  00008594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2e  00000000  00000000  00008c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c8  00000000  00000000  000097c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000ae8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__vector_1>
       8:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_6>
      1c:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e8       	ldi	r30, 0x82	; 130
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 39       	cpi	r26, 0x90	; 144
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a0 e9       	ldi	r26, 0x90	; 144
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3e       	cpi	r26, 0xEF	; 239
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <main>
      9e:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <display_cs_high>:
void display_write_string(char *string, uint8_t start, uint8_t stop) {
	for (uint8_t i = start; i < stop; i++) {
		// Send to display
		display_write_char((uint8_t) string[i]);
	}
}
      a6:	2a 9a       	sbi	0x05, 2	; 5
      a8:	08 95       	ret

000000aa <display_cs_low>:
      aa:	2a 98       	cbi	0x05, 2	; 5
      ac:	08 95       	ret

000000ae <display_init>:
      ae:	0e 94 55 00 	call	0xaa	; 0xaa <display_cs_low>
      b2:	39 9a       	sbi	0x07, 1	; 7
      b4:	41 98       	cbi	0x08, 1	; 8
      b6:	20 e5       	ldi	r18, 0x50	; 80
      b8:	2a 95       	dec	r18
      ba:	f1 f7       	brne	.-4      	; 0xb8 <display_init+0xa>
      bc:	8f e7       	ldi	r24, 0x7F	; 127
      be:	98 e3       	ldi	r25, 0x38	; 56
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	81 50       	subi	r24, 0x01	; 1
      c4:	90 40       	sbci	r25, 0x00	; 0
      c6:	20 40       	sbci	r18, 0x00	; 0
      c8:	e1 f7       	brne	.-8      	; 0xc2 <display_init+0x14>
      ca:	00 c0       	rjmp	.+0      	; 0xcc <display_init+0x1e>
      cc:	00 00       	nop
      ce:	89 e3       	ldi	r24, 0x39	; 57
      d0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
      d4:	80 e5       	ldi	r24, 0x50	; 80
      d6:	8a 95       	dec	r24
      d8:	f1 f7       	brne	.-4      	; 0xd6 <display_init+0x28>
      da:	8d e1       	ldi	r24, 0x1D	; 29
      dc:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
      e0:	90 e5       	ldi	r25, 0x50	; 80
      e2:	9a 95       	dec	r25
      e4:	f1 f7       	brne	.-4      	; 0xe2 <display_init+0x34>
      e6:	80 e5       	ldi	r24, 0x50	; 80
      e8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
      ec:	20 e5       	ldi	r18, 0x50	; 80
      ee:	2a 95       	dec	r18
      f0:	f1 f7       	brne	.-4      	; 0xee <display_init+0x40>
      f2:	8c e6       	ldi	r24, 0x6C	; 108
      f4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
      f8:	80 e5       	ldi	r24, 0x50	; 80
      fa:	8a 95       	dec	r24
      fc:	f1 f7       	brne	.-4      	; 0xfa <display_init+0x4c>
      fe:	8c e7       	ldi	r24, 0x7C	; 124
     100:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
     104:	90 e5       	ldi	r25, 0x50	; 80
     106:	9a 95       	dec	r25
     108:	f1 f7       	brne	.-4      	; 0x106 <display_init+0x58>
     10a:	88 e3       	ldi	r24, 0x38	; 56
     10c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
     110:	20 e5       	ldi	r18, 0x50	; 80
     112:	2a 95       	dec	r18
     114:	f1 f7       	brne	.-4      	; 0x112 <display_init+0x64>
     116:	8c e0       	ldi	r24, 0x0C	; 12
     118:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
     11c:	80 e5       	ldi	r24, 0x50	; 80
     11e:	8a 95       	dec	r24
     120:	f1 f7       	brne	.-4      	; 0x11e <display_init+0x70>
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
     128:	87 eb       	ldi	r24, 0xB7	; 183
     12a:	9b e0       	ldi	r25, 0x0B	; 11
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <display_init+0x7e>
     130:	00 c0       	rjmp	.+0      	; 0x132 <display_init+0x84>
     132:	00 00       	nop
     134:	86 e0       	ldi	r24, 0x06	; 6
     136:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
     13a:	90 e5       	ldi	r25, 0x50	; 80
     13c:	9a 95       	dec	r25
     13e:	f1 f7       	brne	.-4      	; 0x13c <display_init+0x8e>
     140:	0c 94 53 00 	jmp	0xa6	; 0xa6 <display_cs_high>

00000144 <display_clear>:
     144:	0e 94 55 00 	call	0xaa	; 0xaa <display_cs_low>
     148:	41 98       	cbi	0x08, 1	; 8
     14a:	80 e5       	ldi	r24, 0x50	; 80
     14c:	8a 95       	dec	r24
     14e:	f1 f7       	brne	.-4      	; 0x14c <display_clear+0x8>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
     156:	87 eb       	ldi	r24, 0xB7	; 183
     158:	9b e0       	ldi	r25, 0x0B	; 11
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <display_clear+0x16>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <display_clear+0x1c>
     160:	00 00       	nop
     162:	0c 94 53 00 	jmp	0xa6	; 0xa6 <display_cs_high>

00000166 <display_write_char>:
     166:	cf 93       	push	r28
     168:	c8 2f       	mov	r28, r24
     16a:	0e 94 55 00 	call	0xaa	; 0xaa <display_cs_low>
     16e:	41 9a       	sbi	0x08, 1	; 8
     170:	80 e5       	ldi	r24, 0x50	; 80
     172:	8a 95       	dec	r24
     174:	f1 f7       	brne	.-4      	; 0x172 <display_write_char+0xc>
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
     17c:	cf 91       	pop	r28
     17e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <display_cs_high>

00000182 <display_move_cursor>:
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	c8 2f       	mov	r28, r24
     190:	d0 e0       	ldi	r29, 0x00	; 0
     192:	0c 17       	cp	r16, r28
     194:	1d 07       	cpc	r17, r29
     196:	34 f4       	brge	.+12     	; 0x1a4 <display_move_cursor+0x22>
     198:	80 e2       	ldi	r24, 0x20	; 32
     19a:	0e 94 b3 00 	call	0x166	; 0x166 <display_write_char>
     19e:	0f 5f       	subi	r16, 0xFF	; 255
     1a0:	1f 4f       	sbci	r17, 0xFF	; 255
     1a2:	f7 cf       	rjmp	.-18     	; 0x192 <display_move_cursor+0x10>
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	08 95       	ret

000001ae <display_cursor_home>:

/************************************************************************/
/* @brief Moves the cursor to default position                          */
/************************************************************************/
void display_cursor_home(void) {
	display_cs_low();
     1ae:	0e 94 55 00 	call	0xaa	; 0xaa <display_cs_low>
	// Set RS Low
	DISPLAY_PORT_RS &= ~(1<<DISPLAY_RS);
     1b2:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b4:	80 e5       	ldi	r24, 0x50	; 80
     1b6:	8a 95       	dec	r24
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <display_cursor_home+0x8>
	_delay_us(30);
	uint8_t byte = 0x02;
	spi_txrx(byte);
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <spi_txrx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c0:	87 eb       	ldi	r24, 0xB7	; 183
     1c2:	9b e0       	ldi	r25, 0x0B	; 11
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <display_cursor_home+0x16>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <display_cursor_home+0x1c>
     1ca:	00 00       	nop
	_delay_ms(1.5);
	display_cs_high();
     1cc:	0c 94 53 00 	jmp	0xa6	; 0xa6 <display_cs_high>

000001d0 <led_init>:

/************************************************************************/
/* @brief Initializes the LED                                           */
/************************************************************************/
void led_init(void) {
	LED_DDR |= (1<<LED_PIN_RED);
     1d0:	38 9a       	sbi	0x07, 0	; 7
     1d2:	08 95       	ret

000001d4 <led_red_on>:

/************************************************************************/
/* @brief Turns the red LED on                                          */
/************************************************************************/
void led_red_on(void) {
	LED_PORT |= (1<<LED_PIN_RED);
     1d4:	40 9a       	sbi	0x08, 0	; 8
     1d6:	08 95       	ret

000001d8 <led_red_off>:

/************************************************************************/
/* @brief Turns the red LED off                                         */
/************************************************************************/
void led_red_off(void) {
	LED_PORT &= ~(1<<LED_PIN_RED);
     1d8:	40 98       	cbi	0x08, 0	; 8
     1da:	08 95       	ret

000001dc <uartPutChar>:
/************************************************************************/
static int uartPutChar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uartPutChar,NULL,_FDEV_SETUP_WRITE);
static int uartPutChar(char c, FILE *stream){
	//Send char to uart
	if (c == '\n') {
     1dc:	8a 30       	cpi	r24, 0x0A	; 10
     1de:	19 f4       	brne	.+6      	; 0x1e6 <uartPutChar+0xa>
		uartPutChar('\n', stream);
     1e0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <uartPutChar>
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <uartPutChar+0xe>
		} else {
		display_write_char((uint8_t) c);
     1e6:	0e 94 b3 00 	call	0x166	; 0x166 <display_write_char>
	}
	return 0;
}
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret

000001f0 <init_encoder_timer>:
/************************************************************************/
/* @brief Sets a timer for frequency counting interrupt                 */
/************************************************************************/
void init_encoder_timer(void) {
	// Timer2 based frequency counter
	cli();
     1f0:	f8 94       	cli
	TCCR2A = 0;
     1f2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
     1f6:	e1 eb       	ldi	r30, 0xB1	; 177
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	10 82       	st	Z, r1
	// Counter begins at 0
	TCNT2 = 0;
     1fc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	// ~33ms
	OCR2A = 255;
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	// Enable CTC mode
	TCCR2B |= (1<<WGM21);
     206:	80 81       	ld	r24, Z
     208:	82 60       	ori	r24, 0x02	; 2
     20a:	80 83       	st	Z, r24
	// Prescaler 1024
	TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
     20c:	80 81       	ld	r24, Z
     20e:	87 60       	ori	r24, 0x07	; 7
     210:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);
     212:	e0 e7       	ldi	r30, 0x70	; 112
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	82 60       	ori	r24, 0x02	; 2
     21a:	80 83       	st	Z, r24
	sei();
     21c:	78 94       	sei
     21e:	08 95       	ret

00000220 <__vector_18>:
}

/************************************************************************/
/* @brief Interrupt vector for USART                                    */
/************************************************************************/
ISR(USART_RX_vect) {
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	ef 93       	push	r30
     240:	ff 93       	push	r31
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <__vector_18+0x28>
     248:	00 d0       	rcall	.+0      	; 0x24a <__vector_18+0x2a>
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
	
	// Get byte from UART
	uint8_t recv = 0;
	recv = usart_recv_byte();
     24e:	0e 94 98 09 	call	0x1330	; 0x1330 <usart_recv_byte>
	if (recv != '\n') {
     252:	8a 30       	cpi	r24, 0x0A	; 10
     254:	59 f0       	breq	.+22     	; 0x26c <__vector_18+0x4c>
		buf[buf_index] = recv;
     256:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <buf_index>
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	e0 57       	subi	r30, 0x70	; 112
     25e:	fd 4f       	sbci	r31, 0xFD	; 253
     260:	80 83       	st	Z, r24
		buf_index++;
     262:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <buf_index>
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <buf_index>
	}
	
	if ((buf[buf_index - 1] == '.')) {
     26c:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <buf_index>
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	e1 57       	subi	r30, 0x71	; 113
     274:	fd 4f       	sbci	r31, 0xFD	; 253
     276:	80 81       	ld	r24, Z
     278:	8e 32       	cpi	r24, 0x2E	; 46
     27a:	09 f0       	breq	.+2      	; 0x27e <__vector_18+0x5e>
     27c:	10 c1       	rjmp	.+544    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		
	char temp[4];
	buf_index = 0;
     27e:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <buf_index>
	
	// Heartbeat
	switch (buf[0]) {
     282:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end>
     286:	88 36       	cpi	r24, 0x68	; 104
     288:	31 f1       	breq	.+76     	; 0x2d6 <__vector_18+0xb6>
     28a:	78 f4       	brcc	.+30     	; 0x2aa <__vector_18+0x8a>
     28c:	82 36       	cpi	r24, 0x62	; 98
     28e:	09 f4       	brne	.+2      	; 0x292 <__vector_18+0x72>
     290:	9a c0       	rjmp	.+308    	; 0x3c6 <__vector_18+0x1a6>
     292:	20 f4       	brcc	.+8      	; 0x29c <__vector_18+0x7c>
     294:	80 35       	cpi	r24, 0x50	; 80
     296:	09 f4       	brne	.+2      	; 0x29a <__vector_18+0x7a>
     298:	f5 c0       	rjmp	.+490    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     29a:	01 c1       	rjmp	.+514    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     29c:	84 36       	cpi	r24, 0x64	; 100
     29e:	09 f4       	brne	.+2      	; 0x2a2 <__vector_18+0x82>
     2a0:	b7 c0       	rjmp	.+366    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     2a2:	87 36       	cpi	r24, 0x67	; 103
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <__vector_18+0x88>
     2a6:	7a c0       	rjmp	.+244    	; 0x39c <__vector_18+0x17c>
     2a8:	fa c0       	rjmp	.+500    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     2aa:	8e 36       	cpi	r24, 0x6E	; 110
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <__vector_18+0x90>
     2ae:	50 c0       	rjmp	.+160    	; 0x350 <__vector_18+0x130>
     2b0:	30 f4       	brcc	.+12     	; 0x2be <__vector_18+0x9e>
     2b2:	8b 36       	cpi	r24, 0x6B	; 107
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <__vector_18+0x98>
     2b6:	6d c0       	rjmp	.+218    	; 0x392 <__vector_18+0x172>
     2b8:	8d 36       	cpi	r24, 0x6D	; 109
     2ba:	89 f0       	breq	.+34     	; 0x2de <__vector_18+0xbe>
     2bc:	f0 c0       	rjmp	.+480    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     2be:	80 37       	cpi	r24, 0x70	; 112
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <__vector_18+0xa4>
     2c2:	cf c0       	rjmp	.+414    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     2c4:	84 37       	cpi	r24, 0x74	; 116
     2c6:	09 f0       	breq	.+2      	; 0x2ca <__vector_18+0xaa>
     2c8:	ea c0       	rjmp	.+468    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				motor_stop();
			}
			break;
		// Messages
		case 't':
			message[0] = '1';
     2ca:	81 e3       	ldi	r24, 0x31	; 49
     2cc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <message>
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	30 c0       	rjmp	.+96     	; 0x336 <__vector_18+0x116>
	buf_index = 0;
	
	// Heartbeat
	switch (buf[0]) {
		case 'h':
			wdt_reset();
     2d6:	a8 95       	wdr
			heartbeat = 0;
     2d8:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <heartbeat>
			break;
     2dc:	e0 c0       	rjmp	.+448    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		// Motor control
		case 'm': 
			if (!stopped && !stopped_deadman && (heartbeat < 12)) {
     2de:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <stopped>
     2e2:	81 11       	cpse	r24, r1
     2e4:	25 c0       	rjmp	.+74     	; 0x330 <__vector_18+0x110>
     2e6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <stopped_deadman>
     2ea:	81 11       	cpse	r24, r1
     2ec:	21 c0       	rjmp	.+66     	; 0x330 <__vector_18+0x110>
     2ee:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <heartbeat>
     2f2:	8c 30       	cpi	r24, 0x0C	; 12
     2f4:	e8 f4       	brcc	.+58     	; 0x330 <__vector_18+0x110>
				if (buf[2] == '1') {
     2f6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     2fa:	81 33       	cpi	r24, 0x31	; 49
     2fc:	19 f4       	brne	.+6      	; 0x304 <__vector_18+0xe4>
					motor_left_set_cclockwise();
     2fe:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <motor_left_set_cclockwise>
     302:	02 c0       	rjmp	.+4      	; 0x308 <__vector_18+0xe8>
				} else {
					motor_left_set_clockwise();
     304:	0e 94 b4 04 	call	0x968	; 0x968 <motor_left_set_clockwise>
				}
				if (buf[5] == '1') {
     308:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <__data_end+0x5>
     30c:	81 33       	cpi	r24, 0x31	; 49
     30e:	19 f4       	brne	.+6      	; 0x316 <__vector_18+0xf6>
					motor_right_set_cclockwise();
     310:	0e 94 b1 04 	call	0x962	; 0x962 <motor_right_set_cclockwise>
     314:	02 c0       	rjmp	.+4      	; 0x31a <__vector_18+0xfa>
				} else {
					motor_right_set_clockwise();
     316:	0e 94 ae 04 	call	0x95c	; 0x95c <motor_right_set_clockwise>
				}
				// Convert from ascii
				motor_left_set_speed(buf[3]-48);
     31a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <__data_end+0x3>
     31e:	80 53       	subi	r24, 0x30	; 48
     320:	0e 94 74 04 	call	0x8e8	; 0x8e8 <motor_left_set_speed>
				motor_right_set_speed(buf[6]-48);
     324:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end+0x6>
     328:	80 53       	subi	r24, 0x30	; 48
     32a:	0e 94 91 04 	call	0x922	; 0x922 <motor_right_set_speed>
     32e:	b7 c0       	rjmp	.+366    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			} else {
				motor_stop();
     330:	0e 94 d6 04 	call	0x9ac	; 0x9ac <motor_stop>
     334:	b4 c0       	rjmp	.+360    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			break;
		// Messages
		case 't':
			message[0] = '1';
			for (uint8_t i = 1; i < MESSAGE_LENGTH; i++) {
				message[i] = buf[i+1];
     336:	fc 01       	movw	r30, r24
     338:	e0 57       	subi	r30, 0x70	; 112
     33a:	fd 4f       	sbci	r31, 0xFD	; 253
     33c:	20 81       	ld	r18, Z
     33e:	fc 01       	movw	r30, r24
     340:	e2 5f       	subi	r30, 0xF2	; 242
     342:	fe 4f       	sbci	r31, 0xFE	; 254
     344:	20 83       	st	Z, r18
     346:	01 96       	adiw	r24, 0x01	; 1
			}
			break;
		// Messages
		case 't':
			message[0] = '1';
			for (uint8_t i = 1; i < MESSAGE_LENGTH; i++) {
     348:	82 31       	cpi	r24, 0x12	; 18
     34a:	91 05       	cpc	r25, r1
     34c:	a1 f7       	brne	.-24     	; 0x336 <__vector_18+0x116>
     34e:	a7 c0       	rjmp	.+334    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				message[i] = buf[i+1];
			}
			break;
		// Emergency stop
		case 'n':
			motor_stop();
     350:	0e 94 d6 04 	call	0x9ac	; 0x9ac <motor_stop>
			led_red_on();
     354:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <led_red_on>
			stopped = TRUE;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <stopped>
			if (buf[1] == '.') {
     35e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <__data_end+0x1>
     362:	8e 32       	cpi	r24, 0x2E	; 46
     364:	09 f4       	brne	.+2      	; 0x368 <__vector_18+0x148>
     366:	9b c0       	rjmp	.+310    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				break;
			}
			message[0] = '1';
     368:	81 e3       	ldi	r24, 0x31	; 49
     36a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <message>
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	90 e0       	ldi	r25, 0x00	; 0
			for (uint8_t i = 1; i < MESSAGE_LENGTH; i++) {
				message[i] = buf[i+1];
     372:	fc 01       	movw	r30, r24
     374:	e0 57       	subi	r30, 0x70	; 112
     376:	fd 4f       	sbci	r31, 0xFD	; 253
     378:	20 81       	ld	r18, Z
     37a:	fc 01       	movw	r30, r24
     37c:	e2 5f       	subi	r30, 0xF2	; 242
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	20 83       	st	Z, r18
     382:	01 96       	adiw	r24, 0x01	; 1
			stopped = TRUE;
			if (buf[1] == '.') {
				break;
			}
			message[0] = '1';
			for (uint8_t i = 1; i < MESSAGE_LENGTH; i++) {
     384:	82 31       	cpi	r24, 0x12	; 18
     386:	91 05       	cpc	r25, r1
     388:	a1 f7       	brne	.-24     	; 0x372 <__vector_18+0x152>
				message[i] = buf[i+1];
			}
			send_stop_ack = TRUE;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <send_stop_ack>
			break;
     390:	86 c0       	rjmp	.+268    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		// Emergency stop unlock
		case 'k':
			stopped = FALSE;
     392:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <stopped>
			led_red_off();
     396:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <led_red_off>
			break;
     39a:	81 c0       	rjmp	.+258    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		// Handle slow/fast mode
		case 'g':
			if (buf[2] == '0') {
     39c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     3a0:	80 33       	cpi	r24, 0x30	; 48
     3a2:	41 f4       	brne	.+16     	; 0x3b4 <__vector_18+0x194>
				pcf8574a_led_yellow_off();
     3a4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pcf8574a_led_yellow_off>
				motor_set_speed_divider(MOTOR_FAST_DIV);
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	0e 94 3b 04 	call	0x876	; 0x876 <motor_set_speed_divider>
				speed_slow = FALSE;
     3ae:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <speed_slow>
     3b2:	75 c0       	rjmp	.+234    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			} else {
				pcf8574a_led_yellow_on();
     3b4:	0e 94 d4 05 	call	0xba8	; 0xba8 <pcf8574a_led_yellow_on>
				motor_set_speed_divider(MOTOR_SLOW_DIV);
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	0e 94 3b 04 	call	0x876	; 0x876 <motor_set_speed_divider>
				speed_slow = TRUE;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <speed_slow>
     3c4:	6c c0       	rjmp	.+216    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			}
			break;
		// Handle buzzer
		case 'b':
			if ((buf[2] == '3') && (buf[4] == '0')) {
     3c6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     3ca:	83 33       	cpi	r24, 0x33	; 51
     3cc:	39 f4       	brne	.+14     	; 0x3dc <__vector_18+0x1bc>
     3ce:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end+0x4>
     3d2:	80 33       	cpi	r24, 0x30	; 48
     3d4:	19 f4       	brne	.+6      	; 0x3dc <__vector_18+0x1bc>
				summer_off();
     3d6:	0e 94 0b 06 	call	0xc16	; 0xc16 <summer_off>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			} 
			else if ((buf[2] == '3')) {
     3dc:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     3e0:	83 33       	cpi	r24, 0x33	; 51
     3e2:	19 f4       	brne	.+6      	; 0x3ea <__vector_18+0x1ca>
				summer_on();
     3e4:	0e 94 09 06 	call	0xc12	; 0xc12 <summer_on>
     3e8:	5a c0       	rjmp	.+180    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			} 
			else if ((buf[2] == '4') && (buf[4] == '0')) {
     3ea:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     3ee:	84 33       	cpi	r24, 0x34	; 52
     3f0:	31 f4       	brne	.+12     	; 0x3fe <__vector_18+0x1de>
     3f2:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end+0x4>
     3f6:	80 33       	cpi	r24, 0x30	; 48
     3f8:	11 f4       	brne	.+4      	; 0x3fe <__vector_18+0x1de>
				send_b_command = 1;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			} 
			else if ((buf[2] == '4')) {
     3fe:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     402:	84 33       	cpi	r24, 0x34	; 52
     404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     406:	4b c0       	rjmp	.+150    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				send_b_command = 2;
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <send_b_command>
     40e:	47 c0       	rjmp	.+142    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			}
			break;
		// Handle dead man stop/run
		case 'd':
			if ((buf[2] == '3') && (buf[4] == '1')) {
     410:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     414:	83 33       	cpi	r24, 0x33	; 51
     416:	49 f4       	brne	.+18     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     418:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end+0x4>
     41c:	81 33       	cpi	r24, 0x31	; 49
     41e:	29 f4       	brne	.+10     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
				pcf8574a_led_green_on();
     420:	0e 94 c6 05 	call	0xb8c	; 0xb8c <pcf8574a_led_green_on>
				stopped_deadman = FALSE;
     424:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <stopped_deadman>
     428:	3a c0       	rjmp	.+116    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			} 
			else if ((buf[2] == '3') && (buf[4] == '0')) {
     42a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     42e:	83 33       	cpi	r24, 0x33	; 51
     430:	61 f4       	brne	.+24     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     432:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end+0x4>
     436:	80 33       	cpi	r24, 0x30	; 48
     438:	41 f4       	brne	.+16     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				motor_stop();
     43a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <motor_stop>
				pcf8574a_led_green_off();
     43e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <pcf8574a_led_green_off>
				stopped_deadman = TRUE;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <stopped_deadman>
     448:	2a c0       	rjmp	.+84     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			}
			else if ((buf[2] == '4') && (buf[4] == '1')) {
     44a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     44e:	84 33       	cpi	r24, 0x34	; 52
     450:	31 f5       	brne	.+76     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     452:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end+0x4>
     456:	81 33       	cpi	r24, 0x31	; 49
     458:	11 f5       	brne	.+68     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				send_dead_man_ack = TRUE;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <send_dead_man_ack>
     460:	1e c0       	rjmp	.+60     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			}
			break;
		// Save notes to note buffer
		case 'p':
			temp[0] = buf[2];
     462:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
     466:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = buf[3];
     468:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <__data_end+0x3>
     46c:	8a 83       	std	Y+2, r24	; 0x02
			temp[2] = buf[4];
     46e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end+0x4>
     472:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = buf[5];
     474:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <__data_end+0x5>
     478:	8c 83       	std	Y+4, r24	; 0x04
			summer_add_note(temp);
     47a:	ce 01       	movw	r24, r28
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	0e 94 f5 05 	call	0xbea	; 0xbea <summer_add_note>
			break;
     482:	0d c0       	rjmp	.+26     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		// Respond ping on pong
		case 'P':
			if (strncmp((char*)buf, "PING.", 5) == 0) {
     484:	45 e0       	ldi	r20, 0x05	; 5
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	64 e2       	ldi	r22, 0x24	; 36
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	80 e9       	ldi	r24, 0x90	; 144
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     494:	89 2b       	or	r24, r25
     496:	19 f4       	brne	.+6      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
				send_pong = TRUE;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <send_pong>
			}
			break;
		}
	}
}
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_6>:

/************************************************************************/
/* @brief Interrupt vector for heartbeat                                */
/************************************************************************/
ISR(WDT_vect) {
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
	// Let main loop events process
	process = TRUE;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <process>
	// Heartbeat ~3 seconds
	if (heartbeat == 12) {
     4f4:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <heartbeat>
     4f8:	9c 30       	cpi	r25, 0x0C	; 12
     4fa:	19 f4       	brne	.+6      	; 0x502 <__vector_6+0x36>
		send_heartbeat_ack = TRUE;
     4fc:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <send_heartbeat_ack>
     500:	0b c0       	rjmp	.+22     	; 0x518 <__vector_6+0x4c>
		heartbeat++;
	} 
	else if (heartbeat >= 12) {
     502:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <heartbeat>
     506:	8c 30       	cpi	r24, 0x0C	; 12
     508:	18 f0       	brcs	.+6      	; 0x510 <__vector_6+0x44>
		motor_stop();
     50a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <motor_stop>
     50e:	09 c0       	rjmp	.+18     	; 0x522 <__vector_6+0x56>
	}
	else if (!debug) {
     510:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <debug>
     514:	81 11       	cpse	r24, r1
     516:	05 c0       	rjmp	.+10     	; 0x522 <__vector_6+0x56>
		heartbeat++;
     518:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <heartbeat>
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <heartbeat>
	}
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	7f 91       	pop	r23
     530:	6f 91       	pop	r22
     532:	5f 91       	pop	r21
     534:	4f 91       	pop	r20
     536:	3f 91       	pop	r19
     538:	2f 91       	pop	r18
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	0f 90       	pop	r0
     540:	1f 90       	pop	r1
     542:	18 95       	reti

00000544 <init_external_interrupts>:
/************************************************************************/
/* @brief Enable INT0/INT1 interrupts                                   */
/************************************************************************/
void init_external_interrupts(void) {
	// Set pull-up and input on INT0 and INT1
	DDRD &= ~(1<<DDD2);
     544:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
     546:	5a 9a       	sbi	0x0b, 2	; 11
	DDRD &= ~(1<<DDD3);
     548:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1<<PORTD3);
     54a:	5b 9a       	sbi	0x0b, 3	; 11
	// Enable interrupts
	EICRA |= (1<<ISC11) | (1<<ISC10) | (1<<ISC01);
     54c:	e9 e6       	ldi	r30, 0x69	; 105
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	8e 60       	ori	r24, 0x0E	; 14
     554:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0) | (1<<INT1);
     556:	8d b3       	in	r24, 0x1d	; 29
     558:	83 60       	ori	r24, 0x03	; 3
     55a:	8d bb       	out	0x1d, r24	; 29
     55c:	08 95       	ret

0000055e <init>:
/************************************************************************/
/* @brief Initializes all hardware                                      */
/************************************************************************/
void init(void) {
	// Disable interrupts
	cli();
     55e:	f8 94       	cli
	// Redirect stdout so printf prints to USART
	stdout = &mystdout;
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	90 93 ec 04 	sts	0x04EC, r25	; 0x8004ec <__iob+0x3>
     568:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <__iob+0x2>
	// For display
	spi_master_init();
     56c:	0e 94 c7 08 	call	0x118e	; 0x118e <spi_master_init>
	display_init();
     570:	0e 94 57 00 	call	0xae	; 0xae <display_init>
	// For USART/MQTT
	usart_init();
     574:	0e 94 81 09 	call	0x1302	; 0x1302 <usart_init>
	// For LEDS
	led_init();
     578:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <led_init>
	// For Summer
	summer_init(16197);
     57c:	85 e4       	ldi	r24, 0x45	; 69
     57e:	9f e3       	ldi	r25, 0x3F	; 63
     580:	0e 94 af 08 	call	0x115e	; 0x115e <summer_init>
	// For IO-expander, distance sensor and further things.
	i2c_init();
     584:	0e 94 2a 09 	call	0x1254	; 0x1254 <i2c_init>
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	89 e6       	ldi	r24, 0x69	; 105
     58c:	98 e1       	ldi	r25, 0x18	; 24
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	90 40       	sbci	r25, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <init+0x30>
     596:	00 c0       	rjmp	.+0      	; 0x598 <init+0x3a>
     598:	00 00       	nop
	// Let distance sensor calibrate itself.
	_delay_ms(1000);
	pcf8574a_led_green_off();
     59a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <pcf8574a_led_green_off>
	// Initialize motor control
	motor_init();
     59e:	0e 94 b7 04 	call	0x96e	; 0x96e <motor_init>
	// Initialize watchdog for heartbeat functionality
	WDT_Prescaler_Change();
     5a2:	0e 94 b7 09 	call	0x136e	; 0x136e <WDT_Prescaler_Change>
	// Init external interrupts and timer2
	init_encoder_timer();
     5a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_encoder_timer>
	init_external_interrupts();
     5aa:	0e 94 a2 02 	call	0x544	; 0x544 <init_external_interrupts>
	// Enable interrupts and reset watchdog
	sei();
     5ae:	78 94       	sei
	wdt_reset();
     5b0:	a8 95       	wdr
     5b2:	08 95       	ret

000005b4 <main>:
}

int main(void) {
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	a5 97       	sbiw	r28, 0x25	; 37
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
	// Initialize hw/sw
    init();
     5c8:	0e 94 af 02 	call	0x55e	; 0x55e <init>
	
	// I'm ready, logger sends notes to my note buffer
	usart_send_string("v,3.\n", 0, 5);
     5cc:	45 e0       	ldi	r20, 0x05	; 5
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	8a e2       	ldi	r24, 0x2A	; 42
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
	uint8_t lock_button = FALSE;
	uint8_t lock_left_trigger = FALSE;
	uint8_t lock_right_trigger = FALSE;
	uint8_t lock_summer = FALSE;
	uint8_t send_crash_front = FALSE;
	uint8_t send_crash_back = FALSE;
     5d8:	41 2c       	mov	r4, r1
	// For tracking state of button, switches and crash detection.
	uint8_t lock_button = FALSE;
	uint8_t lock_left_trigger = FALSE;
	uint8_t lock_right_trigger = FALSE;
	uint8_t lock_summer = FALSE;
	uint8_t send_crash_front = FALSE;
     5da:	51 2c       	mov	r5, r1
	
	// For tracking state of button, switches and crash detection.
	uint8_t lock_button = FALSE;
	uint8_t lock_left_trigger = FALSE;
	uint8_t lock_right_trigger = FALSE;
	uint8_t lock_summer = FALSE;
     5dc:	1d a2       	std	Y+37, r1	; 0x25
	char sensors_prev[18];
	
	// For tracking state of button, switches and crash detection.
	uint8_t lock_button = FALSE;
	uint8_t lock_left_trigger = FALSE;
	uint8_t lock_right_trigger = FALSE;
     5de:	61 2c       	mov	r6, r1
	char sensors[18];
	char sensors_prev[18];
	
	// For tracking state of button, switches and crash detection.
	uint8_t lock_button = FALSE;
	uint8_t lock_left_trigger = FALSE;
     5e0:	31 2c       	mov	r3, r1
	// For sending sensor values
	char sensors[18];
	char sensors_prev[18];
	
	// For tracking state of button, switches and crash detection.
	uint8_t lock_button = FALSE;
     5e2:	71 2c       	mov	r7, r1
		// Process sensor data
		if (process) {
			process = FALSE;
				
			// Send all sensor values
			sprintf(sensors, "s,%03d,%03d,%01d,%01d,%01d.\n",
     5e4:	6e 01       	movw	r12, r28
     5e6:	23 e1       	ldi	r18, 0x13	; 19
     5e8:	c2 0e       	add	r12, r18
     5ea:	d1 1c       	adc	r13, r1
	uint8_t send_crash_front = FALSE;
	uint8_t send_crash_back = FALSE;

	while (TRUE) {
		// Handle button presses
		byte = pcf8574a_get_state();
     5ec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <pcf8574a_get_state>
     5f0:	18 2f       	mov	r17, r24
		
		// Button on port expander
		if ((byte & (1<<PCF_BUTTON)) && !lock_button) {
     5f2:	84 ff       	sbrs	r24, 4
     5f4:	09 c0       	rjmp	.+18     	; 0x608 <main+0x54>
     5f6:	71 10       	cpse	r7, r1
     5f8:	11 c0       	rjmp	.+34     	; 0x61c <main+0x68>
			usart_send_string("b,4,1.\n", 0, 7);
     5fa:	47 e0       	ldi	r20, 0x07	; 7
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	80 e3       	ldi	r24, 0x30	; 48
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
     606:	0a c0       	rjmp	.+20     	; 0x61c <main+0x68>
			lock_button = TRUE;
		} 
		else if (!(byte & (1<<PCF_BUTTON)) && lock_button) {
     608:	77 20       	and	r7, r7
     60a:	51 f0       	breq	.+20     	; 0x620 <main+0x6c>
			lock_button = FALSE;
			usart_send_string("b,4,0.\n", 0, 7);
     60c:	47 e0       	ldi	r20, 0x07	; 7
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	88 e3       	ldi	r24, 0x38	; 56
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
		if ((byte & (1<<PCF_BUTTON)) && !lock_button) {
			usart_send_string("b,4,1.\n", 0, 7);
			lock_button = TRUE;
		} 
		else if (!(byte & (1<<PCF_BUTTON)) && lock_button) {
			lock_button = FALSE;
     618:	71 2c       	mov	r7, r1
     61a:	02 c0       	rjmp	.+4      	; 0x620 <main+0x6c>
     61c:	77 24       	eor	r7, r7
     61e:	73 94       	inc	r7
			usart_send_string("b,4,0.\n", 0, 7);
		}
		
		// Left crash trigger on port expander
		if ((byte & (1<<PCF_LEFT_TRIGGER)) && !lock_left_trigger) {
     620:	31 2f       	mov	r19, r17
     622:	38 70       	andi	r19, 0x08	; 8
     624:	23 2e       	mov	r2, r19
     626:	13 ff       	sbrs	r17, 3
     628:	0b c0       	rjmp	.+22     	; 0x640 <main+0x8c>
     62a:	31 10       	cpse	r3, r1
     62c:	0b c0       	rjmp	.+22     	; 0x644 <main+0x90>
			motor_stop();
     62e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <motor_stop>
			usart_send_string("f,0.\n", 0, 5);
     632:	45 e0       	ldi	r20, 0x05	; 5
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	80 e4       	ldi	r24, 0x40	; 64
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
     63e:	02 c0       	rjmp	.+4      	; 0x644 <main+0x90>
			lock_left_trigger = TRUE;
		} 
		else if (!(byte & (1<<PCF_LEFT_TRIGGER)) && lock_left_trigger) {
			lock_left_trigger = FALSE;
     640:	31 2c       	mov	r3, r1
     642:	02 c0       	rjmp	.+4      	; 0x648 <main+0x94>
     644:	33 24       	eor	r3, r3
     646:	33 94       	inc	r3
		}
		
		// Right crash trigger on port expander
		if ((byte & (1<<PCF_RIGHT_TRIGGER)) && !lock_right_trigger) {
     648:	01 2f       	mov	r16, r17
     64a:	04 70       	andi	r16, 0x04	; 4
     64c:	12 ff       	sbrs	r17, 2
     64e:	0b c0       	rjmp	.+22     	; 0x666 <main+0xb2>
     650:	61 10       	cpse	r6, r1
     652:	0b c0       	rjmp	.+22     	; 0x66a <main+0xb6>
			motor_stop();
     654:	0e 94 d6 04 	call	0x9ac	; 0x9ac <motor_stop>
			usart_send_string("f,1.\n", 0, 5);
     658:	45 e0       	ldi	r20, 0x05	; 5
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	86 e4       	ldi	r24, 0x46	; 70
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
     664:	02 c0       	rjmp	.+4      	; 0x66a <main+0xb6>
			lock_right_trigger = TRUE;
		} 
		else if (!(byte & (1<<PCF_RIGHT_TRIGGER)) && lock_right_trigger) {
			lock_right_trigger = FALSE;
     666:	61 2c       	mov	r6, r1
     668:	02 c0       	rjmp	.+4      	; 0x66e <main+0xba>
     66a:	66 24       	eor	r6, r6
     66c:	63 94       	inc	r6
		}
		
		// Emergency stop ACK
		if (send_stop_ack) {
     66e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <send_stop_ack>
     672:	88 23       	and	r24, r24
     674:	41 f0       	breq	.+16     	; 0x686 <main+0xd2>
			send_stop_ack = FALSE;
     676:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <send_stop_ack>
			usart_send_string("f,2.\n", 0, 5);
     67a:	45 e0       	ldi	r20, 0x05	; 5
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	8c e4       	ldi	r24, 0x4C	; 76
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
		}
		
		// Dead man stop ACK
		if (send_dead_man_ack) {
     686:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <send_dead_man_ack>
     68a:	88 23       	and	r24, r24
     68c:	41 f0       	breq	.+16     	; 0x69e <main+0xea>
			send_dead_man_ack = FALSE;
     68e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <send_dead_man_ack>
			usart_send_string("f,3.\n", 0, 5);
     692:	45 e0       	ldi	r20, 0x05	; 5
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	82 e5       	ldi	r24, 0x52	; 82
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
		}
		
		// No heartbeat stop ACK
		if (send_heartbeat_ack) {
     69e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <send_heartbeat_ack>
     6a2:	88 23       	and	r24, r24
     6a4:	41 f0       	breq	.+16     	; 0x6b6 <main+0x102>
			send_heartbeat_ack = FALSE;
     6a6:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <send_heartbeat_ack>
			usart_send_string("f,4.\n", 0, 5);
     6aa:	45 e0       	ldi	r20, 0x05	; 5
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	88 e5       	ldi	r24, 0x58	; 88
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
		}
		
		// Get distance sensor readings
		srf02_start_ranging();
     6b6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <srf02_start_ranging>
		// Disable interrupts and get distance
		cli();
     6ba:	f8 94       	cli
		srf02_front = srf02_read_distance_front();
     6bc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <srf02_read_distance_front>
     6c0:	f8 2e       	mov	r15, r24
		srf02_back = srf02_read_distance_back();
     6c2:	0e 94 11 09 	call	0x1222	; 0x1222 <srf02_read_distance_back>
     6c6:	e8 2e       	mov	r14, r24
		
		// Slow down when approaching wall
		if (((srf02_front <= 22) || (srf02_front <= 22)) && !speed_slow) {
     6c8:	86 e1       	ldi	r24, 0x16	; 22
     6ca:	8f 15       	cp	r24, r15
     6cc:	40 f0       	brcs	.+16     	; 0x6de <main+0x12a>
     6ce:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <speed_slow>
     6d2:	81 11       	cpse	r24, r1
     6d4:	0c c0       	rjmp	.+24     	; 0x6ee <main+0x13a>
			motor_set_speed_divider(MOTOR_SLOW_DIV);
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	0e 94 3b 04 	call	0x876	; 0x876 <motor_set_speed_divider>
     6dc:	08 c0       	rjmp	.+16     	; 0x6ee <main+0x13a>
		}
		else if (((srf02_front > 22) && (srf02_front > 22)) && !speed_slow){
     6de:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <speed_slow>
     6e2:	81 11       	cpse	r24, r1
     6e4:	13 c0       	rjmp	.+38     	; 0x70c <main+0x158>
			motor_set_speed_divider(MOTOR_FAST_DIV);
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 3b 04 	call	0x876	; 0x876 <motor_set_speed_divider>
     6ec:	0f c0       	rjmp	.+30     	; 0x70c <main+0x158>
		}
		
		// Crash detection
		if (((srf02_front <= 17) || (srf02_back <= 17)) && !stopped_crash) {
     6ee:	91 e1       	ldi	r25, 0x11	; 17
     6f0:	9f 15       	cp	r25, r15
     6f2:	60 f0       	brcs	.+24     	; 0x70c <main+0x158>
     6f4:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <stopped_crash>
     6f8:	81 11       	cpse	r24, r1
     6fa:	0b c0       	rjmp	.+22     	; 0x712 <main+0x15e>
			motor_stop();
     6fc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <motor_stop>
			stopped_crash = TRUE;
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <stopped_crash>
			stopped_deadman = TRUE;
     706:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <stopped_deadman>
     70a:	0a c0       	rjmp	.+20     	; 0x720 <main+0x16c>
		else if (((srf02_front > 22) && (srf02_front > 22)) && !speed_slow){
			motor_set_speed_divider(MOTOR_FAST_DIV);
		}
		
		// Crash detection
		if (((srf02_front <= 17) || (srf02_back <= 17)) && !stopped_crash) {
     70c:	91 e1       	ldi	r25, 0x11	; 17
     70e:	9e 15       	cp	r25, r14
     710:	88 f7       	brcc	.-30     	; 0x6f4 <main+0x140>
			motor_stop();
			stopped_crash = TRUE;
			stopped_deadman = TRUE;
		} 
		else if ((srf02_front > 20) && (srf02_back > 20)) {
     712:	34 e1       	ldi	r19, 0x14	; 20
     714:	3f 15       	cp	r19, r15
     716:	20 f4       	brcc	.+8      	; 0x720 <main+0x16c>
     718:	3e 15       	cp	r19, r14
     71a:	10 f4       	brcc	.+4      	; 0x720 <main+0x16c>
			stopped_crash = FALSE;
     71c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <stopped_crash>
		}
		
		// Enable interrupts
		sei();
     720:	78 94       	sei

		// Display messages on display
		if (message[0] == '1') {
     722:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <message>
     726:	81 33       	cpi	r24, 0x31	; 49
     728:	69 f0       	breq	.+26     	; 0x744 <main+0x190>
				display_write_char(message[i]);
			}
		}
		
		// ping... pong!
		if (send_pong) {
     72a:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <send_pong>
     72e:	88 23       	and	r24, r24
     730:	29 f1       	breq	.+74     	; 0x77c <main+0x1c8>
			usart_send_string("PONG.\n", 0, 6);
     732:	46 e0       	ldi	r20, 0x06	; 6
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	8e e5       	ldi	r24, 0x5E	; 94
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
			send_pong = FALSE;
     73e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <send_pong>
     742:	1c c0       	rjmp	.+56     	; 0x77c <main+0x1c8>
		// Enable interrupts
		sei();

		// Display messages on display
		if (message[0] == '1') {
			message[0] = '0';
     744:	80 e3       	ldi	r24, 0x30	; 48
     746:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <message>
			display_clear();
     74a:	0e 94 a2 00 	call	0x144	; 0x144 <display_clear>
			display_move_cursor(32);
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	0e 94 c1 00 	call	0x182	; 0x182 <display_move_cursor>
     754:	aa 24       	eor	r10, r10
     756:	a3 94       	inc	r10
     758:	b1 2c       	mov	r11, r1
			for (uint8_t i = 1; i < MESSAGE_LENGTH; i++) {
				if (message[i] == '.') {
     75a:	f5 01       	movw	r30, r10
     75c:	e1 5f       	subi	r30, 0xF1	; 241
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	80 81       	ld	r24, Z
     762:	8e 32       	cpi	r24, 0x2E	; 46
     764:	11 f3       	breq	.-60     	; 0x72a <main+0x176>
					break;
				}
				display_write_char(message[i]);
     766:	80 81       	ld	r24, Z
     768:	0e 94 b3 00 	call	0x166	; 0x166 <display_write_char>
     76c:	9f ef       	ldi	r25, 0xFF	; 255
     76e:	a9 1a       	sub	r10, r25
     770:	b9 0a       	sbc	r11, r25
		// Display messages on display
		if (message[0] == '1') {
			message[0] = '0';
			display_clear();
			display_move_cursor(32);
			for (uint8_t i = 1; i < MESSAGE_LENGTH; i++) {
     772:	21 e1       	ldi	r18, 0x11	; 17
     774:	a2 16       	cp	r10, r18
     776:	b1 04       	cpc	r11, r1
     778:	81 f7       	brne	.-32     	; 0x75a <main+0x1a6>
     77a:	d7 cf       	rjmp	.-82     	; 0x72a <main+0x176>
			usart_send_string("PONG.\n", 0, 6);
			send_pong = FALSE;
		}
		
		// Check if crashing, send message
		if ((srf02_front <= 15) && !send_crash_front) {
     77c:	3f e0       	ldi	r19, 0x0F	; 15
     77e:	3f 15       	cp	r19, r15
     780:	48 f0       	brcs	.+18     	; 0x794 <main+0x1e0>
     782:	51 10       	cpse	r5, r1
     784:	0c c0       	rjmp	.+24     	; 0x79e <main+0x1ea>
			usart_send_string("f,5.\n", 0, 5);
     786:	45 e0       	ldi	r20, 0x05	; 5
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	85 e6       	ldi	r24, 0x65	; 101
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
     792:	05 c0       	rjmp	.+10     	; 0x79e <main+0x1ea>
			send_crash_front = TRUE;
		}
		else if ((srf02_front >= 20)) {
     794:	83 e1       	ldi	r24, 0x13	; 19
     796:	8f 15       	cp	r24, r15
     798:	20 f4       	brcc	.+8      	; 0x7a2 <main+0x1ee>
			send_crash_front = FALSE;
     79a:	51 2c       	mov	r5, r1
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <main+0x1ee>
     79e:	55 24       	eor	r5, r5
     7a0:	53 94       	inc	r5
		}
		
		// Check if crashing, send message
		if ((srf02_back <= 15) && !send_crash_back) {
     7a2:	9f e0       	ldi	r25, 0x0F	; 15
     7a4:	9e 15       	cp	r25, r14
     7a6:	48 f0       	brcs	.+18     	; 0x7ba <main+0x206>
     7a8:	41 10       	cpse	r4, r1
     7aa:	0c c0       	rjmp	.+24     	; 0x7c4 <main+0x210>
			usart_send_string("f,5.\n", 0, 5);
     7ac:	45 e0       	ldi	r20, 0x05	; 5
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	85 e6       	ldi	r24, 0x65	; 101
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
     7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <main+0x210>
			send_crash_back = TRUE;
		}
		else if ((srf02_back >= 20)) {
     7ba:	23 e1       	ldi	r18, 0x13	; 19
     7bc:	2e 15       	cp	r18, r14
     7be:	20 f4       	brcc	.+8      	; 0x7c8 <main+0x214>
			send_crash_back = FALSE;
     7c0:	41 2c       	mov	r4, r1
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <main+0x214>
     7c4:	44 24       	eor	r4, r4
     7c6:	43 94       	inc	r4
		}
		
		// Process sensor data
		if (process) {
     7c8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <process>
     7cc:	88 23       	and	r24, r24
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <main+0x21e>
     7d0:	0d cf       	rjmp	.-486    	; 0x5ec <main+0x38>
			process = FALSE;
     7d2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <process>
				
			// Send all sensor values
			sprintf(sensors, "s,%03d,%03d,%01d,%01d,%01d.\n",
     7d6:	80 2e       	mov	r8, r16
     7d8:	91 2c       	mov	r9, r1
     7da:	95 94       	asr	r9
     7dc:	87 94       	ror	r8
     7de:	95 94       	asr	r9
     7e0:	87 94       	ror	r8
     7e2:	a2 2c       	mov	r10, r2
     7e4:	b1 2c       	mov	r11, r1
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	b5 94       	asr	r11
     7ea:	a7 94       	ror	r10
     7ec:	9a 95       	dec	r25
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <main+0x234>
     7f0:	81 2f       	mov	r24, r17
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	80 95       	com	r24
     7f6:	90 95       	com	r25
     7f8:	85 fb       	bst	r24, 5
     7fa:	22 24       	eor	r2, r2
     7fc:	20 f8       	bld	r2, 0
     7fe:	9f 92       	push	r9
     800:	8f 92       	push	r8
     802:	bf 92       	push	r11
     804:	af 92       	push	r10
     806:	1f 92       	push	r1
     808:	2f 92       	push	r2
     80a:	1f 92       	push	r1
     80c:	ff 92       	push	r15
     80e:	1f 92       	push	r1
     810:	ef 92       	push	r14
     812:	8b e6       	ldi	r24, 0x6B	; 107
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	df 92       	push	r13
     81c:	cf 92       	push	r12
     81e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <sprintf>
			((byte & (1<<PCF_LEFT_TRIGGER))>>PCF_LEFT_TRIGGER),
			((byte & (1<<PCF_RIGHT_TRIGGER))>>PCF_RIGHT_TRIGGER));
			
			// Handle sensor value sending, don't send if same values as
			// previous sent values
			if (strcmp(sensors, sensors_prev) != 0) {
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	c6 01       	movw	r24, r12
     82a:	0e 94 12 0a 	call	0x1424	; 0x1424 <strcmp>
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	89 2b       	or	r24, r25
     83a:	51 f0       	breq	.+20     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
				usart_send_string(sensors, 0, 17);
     83c:	41 e1       	ldi	r20, 0x11	; 17
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	c6 01       	movw	r24, r12
     842:	0e 94 a1 09 	call	0x1342	; 0x1342 <usart_send_string>
				strcpy(sensors_prev, sensors);
     846:	b6 01       	movw	r22, r12
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <strcpy>
			}
				
			// Display sensor readings
			display_sensor_readings(
     850:	08 2d       	mov	r16, r8
     852:	2a 2d       	mov	r18, r10
     854:	42 2d       	mov	r20, r2
     856:	6f 2d       	mov	r22, r15
     858:	8e 2d       	mov	r24, r14
     85a:	0e 94 c2 09 	call	0x1384	; 0x1384 <display_sensor_readings>
				((~byte & (1<<PCF_PIR))>>PCF_PIR), 
				((byte & (1<<PCF_LEFT_TRIGGER))>>PCF_LEFT_TRIGGER),
				((byte & (1<<PCF_RIGHT_TRIGGER))>>PCF_RIGHT_TRIGGER));
			
			// Handle summer on motion detected
			if ((~byte & (1<<PCF_PIR)) && !lock_summer) {
     85e:	15 ff       	sbrs	r17, 5
     860:	02 c0       	rjmp	.+4      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
				summer_play_tune();
				lock_summer = TRUE;
			}
			else if (!(~byte & (1<<PCF_PIR))) {
				lock_summer = FALSE;
     862:	1d a2       	std	Y+37, r1	; 0x25
     864:	c3 ce       	rjmp	.-634    	; 0x5ec <main+0x38>
				((~byte & (1<<PCF_PIR))>>PCF_PIR), 
				((byte & (1<<PCF_LEFT_TRIGGER))>>PCF_LEFT_TRIGGER),
				((byte & (1<<PCF_RIGHT_TRIGGER))>>PCF_RIGHT_TRIGGER));
			
			// Handle summer on motion detected
			if ((~byte & (1<<PCF_PIR)) && !lock_summer) {
     866:	3d a1       	ldd	r19, Y+37	; 0x25
     868:	31 11       	cpse	r19, r1
     86a:	c0 ce       	rjmp	.-640    	; 0x5ec <main+0x38>
				summer_play_tune();
     86c:	0e 94 90 08 	call	0x1120	; 0x1120 <summer_play_tune>
				lock_summer = TRUE;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	8d a3       	std	Y+37, r24	; 0x25
     874:	bb ce       	rjmp	.-650    	; 0x5ec <main+0x38>

00000876 <motor_set_speed_divider>:
/* @brief Gets left speed from encoder                                  */
/* @return Current frequency of right motor                             */
/************************************************************************/
uint8_t motor_get_freq_right(void) {
	return enc_right_freq;
}
     876:	28 2f       	mov	r18, r24
     878:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <motor_speed_div>
     87c:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <motor_left_freq>
     880:	89 9f       	mul	r24, r25
     882:	80 2d       	mov	r24, r0
     884:	11 24       	eor	r1, r1
     886:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <motor_left_freq>
     88a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <motor_speed_div>
     88e:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <motor_right_freq>
     892:	89 9f       	mul	r24, r25
     894:	80 2d       	mov	r24, r0
     896:	11 24       	eor	r1, r1
     898:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <motor_right_freq>
     89c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <motor_left_freq>
     8a0:	62 2f       	mov	r22, r18
     8a2:	0e 94 06 0a 	call	0x140c	; 0x140c <__udivmodqi4>
     8a6:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <motor_left_freq>
     8aa:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <motor_right_freq>
     8ae:	0e 94 06 0a 	call	0x140c	; 0x140c <__udivmodqi4>
     8b2:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <motor_right_freq>
     8b6:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <motor_speed_div>
     8ba:	08 95       	ret

000008bc <motor_conv_duty>:
     8bc:	81 50       	subi	r24, 0x01	; 1
     8be:	89 30       	cpi	r24, 0x09	; 9
     8c0:	30 f4       	brcc	.+12     	; 0x8ce <motor_conv_duty+0x12>
     8c2:	e8 2f       	mov	r30, r24
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	ef 56       	subi	r30, 0x6F	; 111
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	80 81       	ld	r24, Z
     8cc:	08 95       	ret
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret

000008d2 <motor_conv_freq>:
     8d2:	81 50       	subi	r24, 0x01	; 1
     8d4:	89 30       	cpi	r24, 0x09	; 9
     8d6:	30 f4       	brcc	.+12     	; 0x8e4 <motor_conv_freq+0x12>
     8d8:	e8 2f       	mov	r30, r24
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e8 57       	subi	r30, 0x78	; 120
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	80 81       	ld	r24, Z
     8e2:	08 95       	ret
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <motor_left_set_speed>:
     8e8:	cf 93       	push	r28
     8ea:	c8 2f       	mov	r28, r24
     8ec:	0e 94 5e 04 	call	0x8bc	; 0x8bc <motor_conv_duty>
     8f0:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <motor_speed_div>
     8f4:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <motor_speed_div>
     8f8:	22 0f       	add	r18, r18
     8fa:	92 2f       	mov	r25, r18
     8fc:	99 0f       	add	r25, r25
     8fe:	99 0f       	add	r25, r25
     900:	29 0f       	add	r18, r25
     902:	2b 5f       	subi	r18, 0xFB	; 251
     904:	0e 94 06 0a 	call	0x140c	; 0x140c <__udivmodqi4>
     908:	28 0f       	add	r18, r24
     90a:	28 bd       	out	0x28, r18	; 40
     90c:	8c 2f       	mov	r24, r28
     90e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_conv_freq>
     912:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <motor_speed_div>
     916:	0e 94 06 0a 	call	0x140c	; 0x140c <__udivmodqi4>
     91a:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <motor_left_freq>
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <motor_right_set_speed>:
     922:	cf 93       	push	r28
     924:	c8 2f       	mov	r28, r24
     926:	0e 94 5e 04 	call	0x8bc	; 0x8bc <motor_conv_duty>
     92a:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <motor_speed_div>
     92e:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <motor_speed_div>
     932:	22 0f       	add	r18, r18
     934:	92 2f       	mov	r25, r18
     936:	99 0f       	add	r25, r25
     938:	99 0f       	add	r25, r25
     93a:	29 0f       	add	r18, r25
     93c:	2b 5f       	subi	r18, 0xFB	; 251
     93e:	0e 94 06 0a 	call	0x140c	; 0x140c <__udivmodqi4>
     942:	28 0f       	add	r18, r24
     944:	27 bd       	out	0x27, r18	; 39
     946:	8c 2f       	mov	r24, r28
     948:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_conv_freq>
     94c:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <motor_speed_div>
     950:	0e 94 06 0a 	call	0x140c	; 0x140c <__udivmodqi4>
     954:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <motor_right_freq>
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <motor_right_set_clockwise>:
     95c:	28 9a       	sbi	0x05, 0	; 5
     95e:	5f 98       	cbi	0x0b, 7	; 11
     960:	08 95       	ret

00000962 <motor_right_set_cclockwise>:
     962:	28 98       	cbi	0x05, 0	; 5
     964:	5f 9a       	sbi	0x0b, 7	; 11
     966:	08 95       	ret

00000968 <motor_left_set_clockwise>:
     968:	2f 98       	cbi	0x05, 7	; 5
     96a:	2e 9a       	sbi	0x05, 6	; 5
     96c:	08 95       	ret

0000096e <motor_init>:
     96e:	f8 94       	cli
     970:	17 bc       	out	0x27, r1	; 39
     972:	18 bc       	out	0x28, r1	; 40
     974:	84 b5       	in	r24, 0x24	; 36
     976:	80 6a       	ori	r24, 0xA0	; 160
     978:	84 bd       	out	0x24, r24	; 36
     97a:	84 b5       	in	r24, 0x24	; 36
     97c:	8b 60       	ori	r24, 0x0B	; 11
     97e:	84 bd       	out	0x24, r24	; 36
     980:	85 b5       	in	r24, 0x25	; 37
     982:	81 60       	ori	r24, 0x01	; 1
     984:	85 bd       	out	0x25, r24	; 37
     986:	8a b1       	in	r24, 0x0a	; 10
     988:	80 66       	ori	r24, 0x60	; 96
     98a:	8a b9       	out	0x0a, r24	; 10
     98c:	27 9a       	sbi	0x04, 7	; 4
     98e:	50 9a       	sbi	0x0a, 0	; 10
     990:	26 9a       	sbi	0x04, 6	; 4
     992:	27 9a       	sbi	0x04, 7	; 4
     994:	0e 94 b4 04 	call	0x968	; 0x968 <motor_left_set_clockwise>
     998:	0e 94 ae 04 	call	0x95c	; 0x95c <motor_right_set_clockwise>
     99c:	8a b1       	in	r24, 0x0a	; 10
     99e:	83 7f       	andi	r24, 0xF3	; 243
     9a0:	8a b9       	out	0x0a, r24	; 10
     9a2:	78 94       	sei
     9a4:	08 95       	ret

000009a6 <motor_left_set_cclockwise>:
     9a6:	2f 9a       	sbi	0x05, 7	; 5
     9a8:	2e 98       	cbi	0x05, 6	; 5
     9aa:	08 95       	ret

000009ac <motor_stop>:
     9ac:	17 bc       	out	0x27, r1	; 39
     9ae:	18 bc       	out	0x28, r1	; 40
     9b0:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <motor_left_freq>
     9b4:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <motor_right_freq>
     9b8:	08 95       	ret

000009ba <__vector_7>:
     9ba:	1f 92       	push	r1
     9bc:	0f 92       	push	r0
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
     9cc:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <timer2_count0>
     9d0:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <timer2_count0+0x1>
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <timer2_count0+0x1>
     9da:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <timer2_count0>
     9de:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <timer2_count1>
     9e2:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <timer2_count1+0x1>
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <timer2_count1+0x1>
     9ec:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <timer2_count1>
     9f0:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <motor_left_freq>
     9f4:	81 11       	cpse	r24, r1
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__vector_7+0x40>
     9f8:	18 bc       	out	0x28, r1	; 40
     9fa:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <motor_right_freq>
     9fe:	81 11       	cpse	r24, r1
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <__vector_7+0x4a>
     a02:	17 bc       	out	0x27, r1	; 39
     a04:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <timer2_count0>
     a08:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <timer2_count0+0x1>
     a0c:	0a 97       	sbiw	r24, 0x0a	; 10
     a0e:	00 f1       	brcs	.+64     	; 0xa50 <__vector_7+0x96>
     a10:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <enc_left_count>
     a14:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <enc_left_count+0x1>
     a18:	98 2f       	mov	r25, r24
     a1a:	99 0f       	add	r25, r25
     a1c:	99 0f       	add	r25, r25
     a1e:	89 0f       	add	r24, r25
     a20:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <enc_left_freq>
     a24:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <enc_left_count+0x1>
     a28:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <enc_left_count>
     a2c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <enc_right_count>
     a30:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <enc_right_count+0x1>
     a34:	98 2f       	mov	r25, r24
     a36:	99 0f       	add	r25, r25
     a38:	99 0f       	add	r25, r25
     a3a:	89 0f       	add	r24, r25
     a3c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <enc_right_freq>
     a40:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <enc_right_count+0x1>
     a44:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <enc_right_count>
     a48:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <timer2_count0+0x1>
     a4c:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <timer2_count0>
     a50:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <motor_left_freq>
     a54:	81 11       	cpse	r24, r1
     a56:	05 c0       	rjmp	.+10     	; 0xa62 <__vector_7+0xa8>
     a58:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <motor_right_freq>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f4       	brne	.+2      	; 0xa62 <__vector_7+0xa8>
     a60:	4b c0       	rjmp	.+150    	; 0xaf8 <__vector_7+0x13e>
     a62:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <timer2_count1>
     a66:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <timer2_count1+0x1>
     a6a:	03 97       	sbiw	r24, 0x03	; 3
     a6c:	08 f4       	brcc	.+2      	; 0xa70 <__vector_7+0xb6>
     a6e:	44 c0       	rjmp	.+136    	; 0xaf8 <__vector_7+0x13e>
     a70:	88 b5       	in	r24, 0x28	; 40
     a72:	81 3e       	cpi	r24, 0xE1	; 225
     a74:	68 f4       	brcc	.+26     	; 0xa90 <__vector_7+0xd6>
     a76:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <enc_left_freq>
     a7a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <motor_left_freq>
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	07 97       	sbiw	r24, 0x07	; 7
     a84:	28 17       	cp	r18, r24
     a86:	39 07       	cpc	r19, r25
     a88:	1c f4       	brge	.+6      	; 0xa90 <__vector_7+0xd6>
     a8a:	88 b5       	in	r24, 0x28	; 40
     a8c:	8e 5f       	subi	r24, 0xFE	; 254
     a8e:	88 bd       	out	0x28, r24	; 40
     a90:	88 b5       	in	r24, 0x28	; 40
     a92:	8f 31       	cpi	r24, 0x1F	; 31
     a94:	68 f0       	brcs	.+26     	; 0xab0 <__vector_7+0xf6>
     a96:	20 91 df 02 	lds	r18, 0x02DF	; 0x8002df <enc_left_freq>
     a9a:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <motor_left_freq>
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	07 96       	adiw	r24, 0x07	; 7
     aa4:	82 17       	cp	r24, r18
     aa6:	93 07       	cpc	r25, r19
     aa8:	1c f4       	brge	.+6      	; 0xab0 <__vector_7+0xf6>
     aaa:	88 b5       	in	r24, 0x28	; 40
     aac:	82 50       	subi	r24, 0x02	; 2
     aae:	88 bd       	out	0x28, r24	; 40
     ab0:	87 b5       	in	r24, 0x27	; 39
     ab2:	81 3e       	cpi	r24, 0xE1	; 225
     ab4:	68 f4       	brcc	.+26     	; 0xad0 <__vector_7+0x116>
     ab6:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <enc_right_freq>
     aba:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <motor_right_freq>
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	07 97       	sbiw	r24, 0x07	; 7
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	1c f4       	brge	.+6      	; 0xad0 <__vector_7+0x116>
     aca:	87 b5       	in	r24, 0x27	; 39
     acc:	8e 5f       	subi	r24, 0xFE	; 254
     ace:	87 bd       	out	0x27, r24	; 39
     ad0:	87 b5       	in	r24, 0x27	; 39
     ad2:	8f 31       	cpi	r24, 0x1F	; 31
     ad4:	68 f0       	brcs	.+26     	; 0xaf0 <__vector_7+0x136>
     ad6:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <enc_right_freq>
     ada:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <motor_right_freq>
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	07 96       	adiw	r24, 0x07	; 7
     ae4:	82 17       	cp	r24, r18
     ae6:	93 07       	cpc	r25, r19
     ae8:	1c f4       	brge	.+6      	; 0xaf0 <__vector_7+0x136>
     aea:	87 b5       	in	r24, 0x27	; 39
     aec:	82 50       	subi	r24, 0x02	; 2
     aee:	87 bd       	out	0x27, r24	; 39
     af0:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <timer2_count1+0x1>
     af4:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <timer2_count1>
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	3f 91       	pop	r19
     afe:	2f 91       	pop	r18
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <__vector_1>:

/************************************************************************/
/* @brief For counting INT0 frequency                                   */
/************************************************************************/
ISR(INT0_vect) {
     b0a:	1f 92       	push	r1
     b0c:	0f 92       	push	r0
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	0f 92       	push	r0
     b12:	11 24       	eor	r1, r1
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
	enc_left_count++;
     b18:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <enc_left_count>
     b1c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <enc_left_count+0x1>
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <enc_left_count+0x1>
     b26:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <enc_left_count>
}
     b2a:	9f 91       	pop	r25
     b2c:	8f 91       	pop	r24
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <__vector_2>:

/************************************************************************/
/* @brief For counting INT1 frequency                                   */
/************************************************************************/
ISR(INT1_vect) {
     b38:	1f 92       	push	r1
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	0f 92       	push	r0
     b40:	11 24       	eor	r1, r1
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
	enc_right_count++;
     b46:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <enc_right_count>
     b4a:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <enc_right_count+0x1>
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <enc_right_count+0x1>
     b54:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <enc_right_count>
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <pcf8574a_set_pin_mode>:

/************************************************************************/
/* @brief Sets the pin as high or low                                   */
/************************************************************************/
void pcf8574a_set_pin_mode(void) {
	cli();
     b66:	f8 94       	cli
	// Start I2C on Port expander address
	i2c_start(PORT_EXPANDER_ADDRESS+I2C_WRITE);
     b68:	80 e7       	ldi	r24, 0x70	; 112
     b6a:	0e 94 30 09 	call	0x1260	; 0x1260 <i2c_start>
	// Set pin modes and write to Port expander
	uint8_t pin_val = (PCF_PIN & ~PCF_DDR) | PCF_PORT;
	i2c_write(pin_val);
     b6e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <PCF_DDR>
     b72:	80 95       	com	r24
     b74:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <PCF_PIN>
     b78:	89 23       	and	r24, r25
     b7a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <PCF_PORT>
     b7e:	89 2b       	or	r24, r25
     b80:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <i2c_write>
	i2c_stop();
     b84:	0e 94 54 09 	call	0x12a8	; 0x12a8 <i2c_stop>
	sei();
     b88:	78 94       	sei
     b8a:	08 95       	ret

00000b8c <pcf8574a_led_green_on>:

/************************************************************************/
/* @brief Turns the green led on port expander on                       */
/************************************************************************/
void pcf8574a_led_green_on(void) {
	PCF_PORT &= ~(1<<PCF_LED_GREEN);
     b8c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PCF_PORT>
     b90:	8d 7f       	andi	r24, 0xFD	; 253
     b92:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PCF_PORT>
	pcf8574a_set_pin_mode();
     b96:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <pcf8574a_set_pin_mode>

00000b9a <pcf8574a_led_green_off>:

/************************************************************************/
/* @brief Turns the green led on port expander off                      */
/************************************************************************/
void pcf8574a_led_green_off(void) {
	PCF_PORT |= (1<<PCF_LED_GREEN);
     b9a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PCF_PORT>
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PCF_PORT>
	pcf8574a_set_pin_mode();
     ba4:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <pcf8574a_set_pin_mode>

00000ba8 <pcf8574a_led_yellow_on>:

/************************************************************************/
/* @brief Turns the yellow led on port expander on                      */
/************************************************************************/
void pcf8574a_led_yellow_on(void) {
	PCF_PORT &= ~(1<<PCF_LED_YELLOW);
     ba8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PCF_PORT>
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PCF_PORT>
	pcf8574a_set_pin_mode();
     bb2:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <pcf8574a_set_pin_mode>

00000bb6 <pcf8574a_led_yellow_off>:

/************************************************************************/
/* @brief Turns the yellow led on port expander on                      */
/************************************************************************/
void pcf8574a_led_yellow_off(void) {
	PCF_PORT |= (1<<PCF_LED_YELLOW);
     bb6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <PCF_PORT>
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <PCF_PORT>
	pcf8574a_set_pin_mode();
     bc0:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <pcf8574a_set_pin_mode>

00000bc4 <pcf8574a_get_state>:

/************************************************************************/
/* @brief Reads the button/switch and PIR states                        */
/* @return State of port expander pins                                  */
/************************************************************************/
uint8_t pcf8574a_get_state(void) {
     bc4:	cf 93       	push	r28
	cli();
     bc6:	f8 94       	cli
	uint8_t byte = 0;
	// Start I2C on Port expander address
	i2c_start(PORT_EXPANDER_ADDRESS+I2C_READ);
     bc8:	81 e7       	ldi	r24, 0x71	; 113
     bca:	0e 94 30 09 	call	0x1260	; 0x1260 <i2c_start>
	// Read from port expander
	byte = i2c_readAck();
     bce:	0e 94 6d 09 	call	0x12da	; 0x12da <i2c_readAck>
     bd2:	c8 2f       	mov	r28, r24
	i2c_readNak();
     bd4:	0e 94 77 09 	call	0x12ee	; 0x12ee <i2c_readNak>
	i2c_stop();
     bd8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <i2c_stop>
	sei();
     bdc:	78 94       	sei
	return ~byte & PCF_DDR;
     bde:	c0 95       	com	r28
     be0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <PCF_DDR>
     be4:	8c 23       	and	r24, r28
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <summer_add_note>:
}

/************************************************************************/
/* @brief Adds a note to the note buffer                                */
/************************************************************************/
void summer_add_note(char *note) {
     bea:	cf 93       	push	r28
	strncpy(note_buf[INDEX], note, 4);	
     bec:	c0 91 e8 02 	lds	r28, 0x02E8	; 0x8002e8 <INDEX>
     bf0:	44 e0       	ldi	r20, 0x04	; 4
     bf2:	c4 9f       	mul	r28, r20
     bf4:	90 01       	movw	r18, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	44 e0       	ldi	r20, 0x04	; 4
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	bc 01       	movw	r22, r24
     bfe:	c9 01       	movw	r24, r18
     c00:	87 51       	subi	r24, 0x17	; 23
     c02:	9d 4f       	sbci	r25, 0xFD	; 253
     c04:	0e 94 30 0a 	call	0x1460	; 0x1460 <strncpy>
	INDEX++;
     c08:	cf 5f       	subi	r28, 0xFF	; 255
     c0a:	c0 93 e8 02 	sts	0x02E8, r28	; 0x8002e8 <INDEX>
}
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <summer_on>:

/************************************************************************/
/* @brief Turns the Summer on                                           */
/************************************************************************/
void summer_on(void) {
	SUMMER_DDR |= (1<<SUMMER_PIN);
     c12:	21 9a       	sbi	0x04, 1	; 4
     c14:	08 95       	ret

00000c16 <summer_off>:

/************************************************************************/
/* @brief Turns the Summer off                                          */
/************************************************************************/
void summer_off(void) {
	SUMMER_DDR &= ~(1<<SUMMER_PIN);
     c16:	21 98       	cbi	0x04, 1	; 4
     c18:	08 95       	ret

00000c1a <summer_play_note>:
}

/************************************************************************/
/* @brief Sets OCR1A value for note                                     */
/************************************************************************/
void summer_play_note(char *note) {
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
	if (!strncmp(note, "c30", 3)) {
     c20:	43 e0       	ldi	r20, 0x03	; 3
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	6a e9       	ldi	r22, 0x9A	; 154
     c26:	71 e0       	ldi	r23, 0x01	; 1
     c28:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     c2c:	89 2b       	or	r24, r25
     c2e:	19 f4       	brne	.+6      	; 0xc36 <summer_play_note+0x1c>
		OCR1A = 61155;
     c30:	83 ee       	ldi	r24, 0xE3	; 227
     c32:	9e ee       	ldi	r25, 0xEE	; 238
     c34:	33 c2       	rjmp	.+1126   	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "c3s", 3)) {
     c36:	43 e0       	ldi	r20, 0x03	; 3
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	6e e9       	ldi	r22, 0x9E	; 158
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     c44:	89 2b       	or	r24, r25
     c46:	19 f4       	brne	.+6      	; 0xc4e <summer_play_note+0x34>
		OCR1A = 57722;
     c48:	8a e7       	ldi	r24, 0x7A	; 122
     c4a:	91 ee       	ldi	r25, 0xE1	; 225
     c4c:	27 c2       	rjmp	.+1102   	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d30", 3)) {
     c4e:	43 e0       	ldi	r20, 0x03	; 3
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	62 ea       	ldi	r22, 0xA2	; 162
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	ce 01       	movw	r24, r28
     c58:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     c5c:	89 2b       	or	r24, r25
     c5e:	19 f4       	brne	.+6      	; 0xc66 <summer_play_note+0x4c>
		OCR1A = 54482;
     c60:	82 ed       	ldi	r24, 0xD2	; 210
     c62:	94 ed       	ldi	r25, 0xD4	; 212
     c64:	1b c2       	rjmp	.+1078   	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d3s", 3)) {
     c66:	43 e0       	ldi	r20, 0x03	; 3
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	66 ea       	ldi	r22, 0xA6	; 166
     c6c:	71 e0       	ldi	r23, 0x01	; 1
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     c74:	89 2b       	or	r24, r25
     c76:	19 f4       	brne	.+6      	; 0xc7e <summer_play_note+0x64>
		OCR1A = 51424;
     c78:	80 ee       	ldi	r24, 0xE0	; 224
     c7a:	98 ec       	ldi	r25, 0xC8	; 200
     c7c:	0f c2       	rjmp	.+1054   	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "e30", 3)) {
     c7e:	43 e0       	ldi	r20, 0x03	; 3
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	6a ea       	ldi	r22, 0xAA	; 170
     c84:	71 e0       	ldi	r23, 0x01	; 1
     c86:	ce 01       	movw	r24, r28
     c88:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     c8c:	89 2b       	or	r24, r25
     c8e:	19 f4       	brne	.+6      	; 0xc96 <summer_play_note+0x7c>
		OCR1A = 48538;
     c90:	8a e9       	ldi	r24, 0x9A	; 154
     c92:	9d eb       	ldi	r25, 0xBD	; 189
     c94:	03 c2       	rjmp	.+1030   	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f30", 3)) {
     c96:	43 e0       	ldi	r20, 0x03	; 3
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	6e ea       	ldi	r22, 0xAE	; 174
     c9c:	71 e0       	ldi	r23, 0x01	; 1
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     ca4:	89 2b       	or	r24, r25
     ca6:	19 f4       	brne	.+6      	; 0xcae <summer_play_note+0x94>
		OCR1A = 45814;
     ca8:	86 ef       	ldi	r24, 0xF6	; 246
     caa:	92 eb       	ldi	r25, 0xB2	; 178
     cac:	f7 c1       	rjmp	.+1006   	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f3s", 3)) {
     cae:	43 e0       	ldi	r20, 0x03	; 3
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	62 eb       	ldi	r22, 0xB2	; 178
     cb4:	71 e0       	ldi	r23, 0x01	; 1
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     cbc:	89 2b       	or	r24, r25
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <summer_play_note+0xac>
		OCR1A = 43242;
     cc0:	8a ee       	ldi	r24, 0xEA	; 234
     cc2:	98 ea       	ldi	r25, 0xA8	; 168
     cc4:	eb c1       	rjmp	.+982    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g30", 3)) {
     cc6:	43 e0       	ldi	r20, 0x03	; 3
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	66 eb       	ldi	r22, 0xB6	; 182
     ccc:	71 e0       	ldi	r23, 0x01	; 1
     cce:	ce 01       	movw	r24, r28
     cd0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     cd4:	89 2b       	or	r24, r25
     cd6:	19 f4       	brne	.+6      	; 0xcde <summer_play_note+0xc4>
		OCR1A = 40815;
     cd8:	8f e6       	ldi	r24, 0x6F	; 111
     cda:	9f e9       	ldi	r25, 0x9F	; 159
     cdc:	df c1       	rjmp	.+958    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g3s", 3)) {
     cde:	43 e0       	ldi	r20, 0x03	; 3
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	6a eb       	ldi	r22, 0xBA	; 186
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	ce 01       	movw	r24, r28
     ce8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     cec:	89 2b       	or	r24, r25
     cee:	19 f4       	brne	.+6      	; 0xcf6 <summer_play_note+0xdc>
		OCR1A = 38524;
     cf0:	8c e7       	ldi	r24, 0x7C	; 124
     cf2:	96 e9       	ldi	r25, 0x96	; 150
     cf4:	d3 c1       	rjmp	.+934    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a30", 3)) {
     cf6:	43 e0       	ldi	r20, 0x03	; 3
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	6e eb       	ldi	r22, 0xBE	; 190
     cfc:	71 e0       	ldi	r23, 0x01	; 1
     cfe:	ce 01       	movw	r24, r28
     d00:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     d04:	89 2b       	or	r24, r25
     d06:	19 f4       	brne	.+6      	; 0xd0e <summer_play_note+0xf4>
		OCR1A = 36362;
     d08:	8a e0       	ldi	r24, 0x0A	; 10
     d0a:	9e e8       	ldi	r25, 0x8E	; 142
     d0c:	c7 c1       	rjmp	.+910    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a3s", 3)) {
     d0e:	43 e0       	ldi	r20, 0x03	; 3
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	62 ec       	ldi	r22, 0xC2	; 194
     d14:	71 e0       	ldi	r23, 0x01	; 1
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     d1c:	89 2b       	or	r24, r25
     d1e:	19 f4       	brne	.+6      	; 0xd26 <summer_play_note+0x10c>
		OCR1A = 34321;
     d20:	81 e1       	ldi	r24, 0x11	; 17
     d22:	96 e8       	ldi	r25, 0x86	; 134
     d24:	bb c1       	rjmp	.+886    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "b30", 3)) {
     d26:	43 e0       	ldi	r20, 0x03	; 3
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	66 ec       	ldi	r22, 0xC6	; 198
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	ce 01       	movw	r24, r28
     d30:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     d34:	89 2b       	or	r24, r25
     d36:	19 f4       	brne	.+6      	; 0xd3e <summer_play_note+0x124>
		OCR1A = 32395;
     d38:	8b e8       	ldi	r24, 0x8B	; 139
     d3a:	9e e7       	ldi	r25, 0x7E	; 126
     d3c:	af c1       	rjmp	.+862    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "c40", 3)) {
     d3e:	43 e0       	ldi	r20, 0x03	; 3
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	6a ec       	ldi	r22, 0xCA	; 202
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	ce 01       	movw	r24, r28
     d48:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     d4c:	89 2b       	or	r24, r25
     d4e:	19 f4       	brne	.+6      	; 0xd56 <summer_play_note+0x13c>
		OCR1A = 30577;
     d50:	81 e7       	ldi	r24, 0x71	; 113
     d52:	97 e7       	ldi	r25, 0x77	; 119
     d54:	a3 c1       	rjmp	.+838    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "c4s", 3)) {
     d56:	43 e0       	ldi	r20, 0x03	; 3
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	6e ec       	ldi	r22, 0xCE	; 206
     d5c:	71 e0       	ldi	r23, 0x01	; 1
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     d64:	89 2b       	or	r24, r25
     d66:	19 f4       	brne	.+6      	; 0xd6e <summer_play_note+0x154>
		OCR1A = 28860;
     d68:	8c eb       	ldi	r24, 0xBC	; 188
     d6a:	90 e7       	ldi	r25, 0x70	; 112
     d6c:	97 c1       	rjmp	.+814    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d40", 3)) {
     d6e:	43 e0       	ldi	r20, 0x03	; 3
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	62 ed       	ldi	r22, 0xD2	; 210
     d74:	71 e0       	ldi	r23, 0x01	; 1
     d76:	ce 01       	movw	r24, r28
     d78:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     d7c:	89 2b       	or	r24, r25
     d7e:	19 f4       	brne	.+6      	; 0xd86 <summer_play_note+0x16c>
		OCR1A = 27240;
     d80:	88 e6       	ldi	r24, 0x68	; 104
     d82:	9a e6       	ldi	r25, 0x6A	; 106
     d84:	8b c1       	rjmp	.+790    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d4s", 3)) {
     d86:	43 e0       	ldi	r20, 0x03	; 3
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	66 ed       	ldi	r22, 0xD6	; 214
     d8c:	71 e0       	ldi	r23, 0x01	; 1
     d8e:	ce 01       	movw	r24, r28
     d90:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     d94:	89 2b       	or	r24, r25
     d96:	19 f4       	brne	.+6      	; 0xd9e <summer_play_note+0x184>
		OCR1A = 25711;
     d98:	8f e6       	ldi	r24, 0x6F	; 111
     d9a:	94 e6       	ldi	r25, 0x64	; 100
     d9c:	7f c1       	rjmp	.+766    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "e40", 3)) {
     d9e:	43 e0       	ldi	r20, 0x03	; 3
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	6a ed       	ldi	r22, 0xDA	; 218
     da4:	71 e0       	ldi	r23, 0x01	; 1
     da6:	ce 01       	movw	r24, r28
     da8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     dac:	89 2b       	or	r24, r25
     dae:	19 f4       	brne	.+6      	; 0xdb6 <summer_play_note+0x19c>
		OCR1A = 24268;
     db0:	8c ec       	ldi	r24, 0xCC	; 204
     db2:	9e e5       	ldi	r25, 0x5E	; 94
     db4:	73 c1       	rjmp	.+742    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f40", 3)) {
     db6:	43 e0       	ldi	r20, 0x03	; 3
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	6e ed       	ldi	r22, 0xDE	; 222
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     dc4:	89 2b       	or	r24, r25
     dc6:	19 f4       	brne	.+6      	; 0xdce <summer_play_note+0x1b4>
		OCR1A = 22906;
     dc8:	8a e7       	ldi	r24, 0x7A	; 122
     dca:	99 e5       	ldi	r25, 0x59	; 89
     dcc:	67 c1       	rjmp	.+718    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f4s", 3)) {
     dce:	43 e0       	ldi	r20, 0x03	; 3
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	62 ee       	ldi	r22, 0xE2	; 226
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	ce 01       	movw	r24, r28
     dd8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     ddc:	89 2b       	or	r24, r25
     dde:	19 f4       	brne	.+6      	; 0xde6 <summer_play_note+0x1cc>
		OCR1A = 21620;
     de0:	84 e7       	ldi	r24, 0x74	; 116
     de2:	94 e5       	ldi	r25, 0x54	; 84
     de4:	5b c1       	rjmp	.+694    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g40", 3)) {
     de6:	43 e0       	ldi	r20, 0x03	; 3
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	66 ee       	ldi	r22, 0xE6	; 230
     dec:	71 e0       	ldi	r23, 0x01	; 1
     dee:	ce 01       	movw	r24, r28
     df0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     df4:	89 2b       	or	r24, r25
     df6:	19 f4       	brne	.+6      	; 0xdfe <summer_play_note+0x1e4>
		OCR1A = 20407;
     df8:	87 eb       	ldi	r24, 0xB7	; 183
     dfa:	9f e4       	ldi	r25, 0x4F	; 79
     dfc:	4f c1       	rjmp	.+670    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g4s", 3)) {
     dfe:	43 e0       	ldi	r20, 0x03	; 3
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	6a ee       	ldi	r22, 0xEA	; 234
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	ce 01       	movw	r24, r28
     e08:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     e0c:	89 2b       	or	r24, r25
     e0e:	19 f4       	brne	.+6      	; 0xe16 <summer_play_note+0x1fc>
		OCR1A = 19261;
     e10:	8d e3       	ldi	r24, 0x3D	; 61
     e12:	9b e4       	ldi	r25, 0x4B	; 75
     e14:	43 c1       	rjmp	.+646    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a40", 3)) {
     e16:	43 e0       	ldi	r20, 0x03	; 3
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	6e ee       	ldi	r22, 0xEE	; 238
     e1c:	71 e0       	ldi	r23, 0x01	; 1
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     e24:	89 2b       	or	r24, r25
     e26:	19 f4       	brne	.+6      	; 0xe2e <summer_play_note+0x214>
		OCR1A = 18180;	
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	97 e4       	ldi	r25, 0x47	; 71
     e2c:	37 c1       	rjmp	.+622    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a4s", 3)) {
     e2e:	43 e0       	ldi	r20, 0x03	; 3
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	62 ef       	ldi	r22, 0xF2	; 242
     e34:	71 e0       	ldi	r23, 0x01	; 1
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     e3c:	89 2b       	or	r24, r25
     e3e:	19 f4       	brne	.+6      	; 0xe46 <summer_play_note+0x22c>
		OCR1A = 17160;
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	93 e4       	ldi	r25, 0x43	; 67
     e44:	2b c1       	rjmp	.+598    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "b40", 3)) {
     e46:	43 e0       	ldi	r20, 0x03	; 3
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	66 ef       	ldi	r22, 0xF6	; 246
     e4c:	71 e0       	ldi	r23, 0x01	; 1
     e4e:	ce 01       	movw	r24, r28
     e50:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     e54:	89 2b       	or	r24, r25
     e56:	19 f4       	brne	.+6      	; 0xe5e <summer_play_note+0x244>
		OCR1A = 16197;
     e58:	85 e4       	ldi	r24, 0x45	; 69
     e5a:	9f e3       	ldi	r25, 0x3F	; 63
     e5c:	1f c1       	rjmp	.+574    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "c50", 3)) {
     e5e:	43 e0       	ldi	r20, 0x03	; 3
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	6a ef       	ldi	r22, 0xFA	; 250
     e64:	71 e0       	ldi	r23, 0x01	; 1
     e66:	ce 01       	movw	r24, r28
     e68:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     e6c:	89 2b       	or	r24, r25
     e6e:	19 f4       	brne	.+6      	; 0xe76 <summer_play_note+0x25c>
		OCR1A = 15288;
     e70:	88 eb       	ldi	r24, 0xB8	; 184
     e72:	9b e3       	ldi	r25, 0x3B	; 59
     e74:	13 c1       	rjmp	.+550    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "c5s", 3)) {
     e76:	43 e0       	ldi	r20, 0x03	; 3
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	6e ef       	ldi	r22, 0xFE	; 254
     e7c:	71 e0       	ldi	r23, 0x01	; 1
     e7e:	ce 01       	movw	r24, r28
     e80:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     e84:	89 2b       	or	r24, r25
     e86:	19 f4       	brne	.+6      	; 0xe8e <summer_play_note+0x274>
		OCR1A = 14429;
     e88:	8d e5       	ldi	r24, 0x5D	; 93
     e8a:	98 e3       	ldi	r25, 0x38	; 56
     e8c:	07 c1       	rjmp	.+526    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d50", 3)) {
     e8e:	43 e0       	ldi	r20, 0x03	; 3
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	62 e0       	ldi	r22, 0x02	; 2
     e94:	72 e0       	ldi	r23, 0x02	; 2
     e96:	ce 01       	movw	r24, r28
     e98:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     e9c:	89 2b       	or	r24, r25
     e9e:	19 f4       	brne	.+6      	; 0xea6 <summer_play_note+0x28c>
		OCR1A = 13619;
     ea0:	83 e3       	ldi	r24, 0x33	; 51
     ea2:	95 e3       	ldi	r25, 0x35	; 53
     ea4:	fb c0       	rjmp	.+502    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d5s", 3)) {
     ea6:	43 e0       	ldi	r20, 0x03	; 3
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	66 e0       	ldi	r22, 0x06	; 6
     eac:	72 e0       	ldi	r23, 0x02	; 2
     eae:	ce 01       	movw	r24, r28
     eb0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     eb4:	89 2b       	or	r24, r25
     eb6:	19 f4       	brne	.+6      	; 0xebe <summer_play_note+0x2a4>
		OCR1A = 12855;
     eb8:	87 e3       	ldi	r24, 0x37	; 55
     eba:	92 e3       	ldi	r25, 0x32	; 50
     ebc:	ef c0       	rjmp	.+478    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "e50", 3)) {
     ebe:	43 e0       	ldi	r20, 0x03	; 3
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	6a e0       	ldi	r22, 0x0A	; 10
     ec4:	72 e0       	ldi	r23, 0x02	; 2
     ec6:	ce 01       	movw	r24, r28
     ec8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     ecc:	89 2b       	or	r24, r25
     ece:	19 f4       	brne	.+6      	; 0xed6 <summer_play_note+0x2bc>
		OCR1A = 12133;
     ed0:	85 e6       	ldi	r24, 0x65	; 101
     ed2:	9f e2       	ldi	r25, 0x2F	; 47
     ed4:	e3 c0       	rjmp	.+454    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f50", 3)) {
     ed6:	43 e0       	ldi	r20, 0x03	; 3
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	6e e0       	ldi	r22, 0x0E	; 14
     edc:	72 e0       	ldi	r23, 0x02	; 2
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     ee4:	89 2b       	or	r24, r25
     ee6:	19 f4       	brne	.+6      	; 0xeee <summer_play_note+0x2d4>
		OCR1A = 11452;
     ee8:	8c eb       	ldi	r24, 0xBC	; 188
     eea:	9c e2       	ldi	r25, 0x2C	; 44
     eec:	d7 c0       	rjmp	.+430    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f5s", 3)) {
     eee:	43 e0       	ldi	r20, 0x03	; 3
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	62 e1       	ldi	r22, 0x12	; 18
     ef4:	72 e0       	ldi	r23, 0x02	; 2
     ef6:	ce 01       	movw	r24, r28
     ef8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     efc:	89 2b       	or	r24, r25
     efe:	19 f4       	brne	.+6      	; 0xf06 <summer_play_note+0x2ec>
		OCR1A = 10809;
     f00:	89 e3       	ldi	r24, 0x39	; 57
     f02:	9a e2       	ldi	r25, 0x2A	; 42
     f04:	cb c0       	rjmp	.+406    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g50", 3)) {
     f06:	43 e0       	ldi	r20, 0x03	; 3
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	66 e1       	ldi	r22, 0x16	; 22
     f0c:	72 e0       	ldi	r23, 0x02	; 2
     f0e:	ce 01       	movw	r24, r28
     f10:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     f14:	89 2b       	or	r24, r25
     f16:	19 f4       	brne	.+6      	; 0xf1e <summer_play_note+0x304>
		OCR1A = 10203;
     f18:	8b ed       	ldi	r24, 0xDB	; 219
     f1a:	97 e2       	ldi	r25, 0x27	; 39
     f1c:	bf c0       	rjmp	.+382    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g5s", 3)) {
     f1e:	43 e0       	ldi	r20, 0x03	; 3
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	6a e1       	ldi	r22, 0x1A	; 26
     f24:	72 e0       	ldi	r23, 0x02	; 2
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     f2c:	89 2b       	or	r24, r25
     f2e:	19 f4       	brne	.+6      	; 0xf36 <summer_play_note+0x31c>
		OCR1A = 9630;
     f30:	8e e9       	ldi	r24, 0x9E	; 158
     f32:	95 e2       	ldi	r25, 0x25	; 37
     f34:	b3 c0       	rjmp	.+358    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a50", 3)) {
     f36:	43 e0       	ldi	r20, 0x03	; 3
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	6e e1       	ldi	r22, 0x1E	; 30
     f3c:	72 e0       	ldi	r23, 0x02	; 2
     f3e:	ce 01       	movw	r24, r28
     f40:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     f44:	89 2b       	or	r24, r25
     f46:	19 f4       	brne	.+6      	; 0xf4e <summer_play_note+0x334>
		OCR1A = 9089;
     f48:	81 e8       	ldi	r24, 0x81	; 129
     f4a:	93 e2       	ldi	r25, 0x23	; 35
     f4c:	a7 c0       	rjmp	.+334    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a5s", 3)) {
     f4e:	43 e0       	ldi	r20, 0x03	; 3
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	62 e2       	ldi	r22, 0x22	; 34
     f54:	72 e0       	ldi	r23, 0x02	; 2
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     f5c:	89 2b       	or	r24, r25
     f5e:	19 f4       	brne	.+6      	; 0xf66 <summer_play_note+0x34c>
		OCR1A = 8579;
     f60:	83 e8       	ldi	r24, 0x83	; 131
     f62:	91 e2       	ldi	r25, 0x21	; 33
     f64:	9b c0       	rjmp	.+310    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "b50", 3)) {
     f66:	43 e0       	ldi	r20, 0x03	; 3
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	66 e2       	ldi	r22, 0x26	; 38
     f6c:	72 e0       	ldi	r23, 0x02	; 2
     f6e:	ce 01       	movw	r24, r28
     f70:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     f74:	89 2b       	or	r24, r25
     f76:	19 f4       	brne	.+6      	; 0xf7e <summer_play_note+0x364>
		OCR1A = 8098;
     f78:	82 ea       	ldi	r24, 0xA2	; 162
     f7a:	9f e1       	ldi	r25, 0x1F	; 31
     f7c:	8f c0       	rjmp	.+286    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "c60", 3)) {
     f7e:	43 e0       	ldi	r20, 0x03	; 3
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	6a e2       	ldi	r22, 0x2A	; 42
     f84:	72 e0       	ldi	r23, 0x02	; 2
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     f8c:	89 2b       	or	r24, r25
     f8e:	19 f4       	brne	.+6      	; 0xf96 <summer_play_note+0x37c>
		OCR1A = 7643;
     f90:	8b ed       	ldi	r24, 0xDB	; 219
     f92:	9d e1       	ldi	r25, 0x1D	; 29
     f94:	83 c0       	rjmp	.+262    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "c6s", 3)) {
     f96:	43 e0       	ldi	r20, 0x03	; 3
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	6e e2       	ldi	r22, 0x2E	; 46
     f9c:	72 e0       	ldi	r23, 0x02	; 2
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     fa4:	89 2b       	or	r24, r25
     fa6:	19 f4       	brne	.+6      	; 0xfae <summer_play_note+0x394>
		OCR1A = 7214;
     fa8:	8e e2       	ldi	r24, 0x2E	; 46
     faa:	9c e1       	ldi	r25, 0x1C	; 28
     fac:	77 c0       	rjmp	.+238    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d60", 3)) {
     fae:	43 e0       	ldi	r20, 0x03	; 3
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	62 e3       	ldi	r22, 0x32	; 50
     fb4:	72 e0       	ldi	r23, 0x02	; 2
     fb6:	ce 01       	movw	r24, r28
     fb8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     fbc:	89 2b       	or	r24, r25
     fbe:	19 f4       	brne	.+6      	; 0xfc6 <summer_play_note+0x3ac>
		OCR1A = 6809;
     fc0:	89 e9       	ldi	r24, 0x99	; 153
     fc2:	9a e1       	ldi	r25, 0x1A	; 26
     fc4:	6b c0       	rjmp	.+214    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "d6s", 3)) {
     fc6:	43 e0       	ldi	r20, 0x03	; 3
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	66 e3       	ldi	r22, 0x36	; 54
     fcc:	72 e0       	ldi	r23, 0x02	; 2
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     fd4:	89 2b       	or	r24, r25
     fd6:	19 f4       	brne	.+6      	; 0xfde <summer_play_note+0x3c4>
		OCR1A = 6427;
     fd8:	8b e1       	ldi	r24, 0x1B	; 27
     fda:	99 e1       	ldi	r25, 0x19	; 25
     fdc:	5f c0       	rjmp	.+190    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "e60", 3)) {
     fde:	43 e0       	ldi	r20, 0x03	; 3
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	6a e3       	ldi	r22, 0x3A	; 58
     fe4:	72 e0       	ldi	r23, 0x02	; 2
     fe6:	ce 01       	movw	r24, r28
     fe8:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
     fec:	89 2b       	or	r24, r25
     fee:	19 f4       	brne	.+6      	; 0xff6 <summer_play_note+0x3dc>
		OCR1A = 6066;
     ff0:	82 eb       	ldi	r24, 0xB2	; 178
     ff2:	97 e1       	ldi	r25, 0x17	; 23
     ff4:	53 c0       	rjmp	.+166    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f60", 3)) {
     ff6:	43 e0       	ldi	r20, 0x03	; 3
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	6e e3       	ldi	r22, 0x3E	; 62
     ffc:	72 e0       	ldi	r23, 0x02	; 2
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
    1004:	89 2b       	or	r24, r25
    1006:	19 f4       	brne	.+6      	; 0x100e <summer_play_note+0x3f4>
		OCR1A = 5725;
    1008:	8d e5       	ldi	r24, 0x5D	; 93
    100a:	96 e1       	ldi	r25, 0x16	; 22
    100c:	47 c0       	rjmp	.+142    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "f6s", 3)) {
    100e:	43 e0       	ldi	r20, 0x03	; 3
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	62 e4       	ldi	r22, 0x42	; 66
    1014:	72 e0       	ldi	r23, 0x02	; 2
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
    101c:	89 2b       	or	r24, r25
    101e:	19 f4       	brne	.+6      	; 0x1026 <summer_play_note+0x40c>
		OCR1A = 5404;
    1020:	8c e1       	ldi	r24, 0x1C	; 28
    1022:	95 e1       	ldi	r25, 0x15	; 21
    1024:	3b c0       	rjmp	.+118    	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g60", 3)) {
    1026:	43 e0       	ldi	r20, 0x03	; 3
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	66 e4       	ldi	r22, 0x46	; 70
    102c:	72 e0       	ldi	r23, 0x02	; 2
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
    1034:	89 2b       	or	r24, r25
    1036:	19 f4       	brne	.+6      	; 0x103e <summer_play_note+0x424>
		OCR1A = 5101;
    1038:	8d ee       	ldi	r24, 0xED	; 237
    103a:	93 e1       	ldi	r25, 0x13	; 19
    103c:	2f c0       	rjmp	.+94     	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "g6s", 3)) {
    103e:	43 e0       	ldi	r20, 0x03	; 3
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	6a e4       	ldi	r22, 0x4A	; 74
    1044:	72 e0       	ldi	r23, 0x02	; 2
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
    104c:	89 2b       	or	r24, r25
    104e:	19 f4       	brne	.+6      	; 0x1056 <summer_play_note+0x43c>
		OCR1A = 4814;
    1050:	8e ec       	ldi	r24, 0xCE	; 206
    1052:	92 e1       	ldi	r25, 0x12	; 18
    1054:	23 c0       	rjmp	.+70     	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a60", 3)) {
    1056:	43 e0       	ldi	r20, 0x03	; 3
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	6e e4       	ldi	r22, 0x4E	; 78
    105c:	72 e0       	ldi	r23, 0x02	; 2
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
    1064:	89 2b       	or	r24, r25
    1066:	19 f4       	brne	.+6      	; 0x106e <summer_play_note+0x454>
		OCR1A = 4544;
    1068:	80 ec       	ldi	r24, 0xC0	; 192
    106a:	91 e1       	ldi	r25, 0x11	; 17
    106c:	17 c0       	rjmp	.+46     	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "a6s", 3)) {
    106e:	43 e0       	ldi	r20, 0x03	; 3
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	62 e5       	ldi	r22, 0x52	; 82
    1074:	72 e0       	ldi	r23, 0x02	; 2
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
    107c:	89 2b       	or	r24, r25
    107e:	19 f4       	brne	.+6      	; 0x1086 <summer_play_note+0x46c>
		OCR1A = 4289;
    1080:	81 ec       	ldi	r24, 0xC1	; 193
    1082:	90 e1       	ldi	r25, 0x10	; 16
    1084:	0b c0       	rjmp	.+22     	; 0x109c <summer_play_note+0x482>
	} 
	else if (!strncmp(note, "b60", 3)) {
    1086:	43 e0       	ldi	r20, 0x03	; 3
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	66 e5       	ldi	r22, 0x56	; 86
    108c:	72 e0       	ldi	r23, 0x02	; 2
    108e:	ce 01       	movw	r24, r28
    1090:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncmp>
    1094:	89 2b       	or	r24, r25
    1096:	31 f4       	brne	.+12     	; 0x10a4 <summer_play_note+0x48a>
		OCR1A = 4048;
    1098:	80 ed       	ldi	r24, 0xD0	; 208
    109a:	9f e0       	ldi	r25, 0x0F	; 15
    109c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    10a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
	
	// Check if delay
	if (note[0] != '0') {
    10a4:	88 81       	ld	r24, Y
    10a6:	80 33       	cpi	r24, 0x30	; 48
    10a8:	11 f0       	breq	.+4      	; 0x10ae <summer_play_note+0x494>
		summer_on();
    10aa:	0e 94 09 06 	call	0xc12	; 0xc12 <summer_on>
	}
	switch (note[3]) {
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	82 33       	cpi	r24, 0x32	; 50
    10b2:	b9 f0       	breq	.+46     	; 0x10e2 <summer_play_note+0x4c8>
    10b4:	50 f4       	brcc	.+20     	; 0x10ca <summer_play_note+0x4b0>
    10b6:	81 33       	cpi	r24, 0x31	; 49
    10b8:	29 f5       	brne	.+74     	; 0x1104 <summer_play_note+0x4ea>
    10ba:	2f ef       	ldi	r18, 0xFF	; 255
    10bc:	89 e6       	ldi	r24, 0x69	; 105
    10be:	98 e1       	ldi	r25, 0x18	; 24
    10c0:	21 50       	subi	r18, 0x01	; 1
    10c2:	80 40       	sbci	r24, 0x00	; 0
    10c4:	90 40       	sbci	r25, 0x00	; 0
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <summer_play_note+0x4a6>
    10c8:	1b c0       	rjmp	.+54     	; 0x1100 <summer_play_note+0x4e6>
    10ca:	84 33       	cpi	r24, 0x34	; 52
    10cc:	91 f0       	breq	.+36     	; 0x10f2 <summer_play_note+0x4d8>
    10ce:	88 33       	cpi	r24, 0x38	; 56
    10d0:	c9 f4       	brne	.+50     	; 0x1104 <summer_play_note+0x4ea>
    10d2:	2f e3       	ldi	r18, 0x3F	; 63
    10d4:	8d e0       	ldi	r24, 0x0D	; 13
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	21 50       	subi	r18, 0x01	; 1
    10da:	80 40       	sbci	r24, 0x00	; 0
    10dc:	90 40       	sbci	r25, 0x00	; 0
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <summer_play_note+0x4be>
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <summer_play_note+0x4e6>
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	84 e3       	ldi	r24, 0x34	; 52
    10e6:	9c e0       	ldi	r25, 0x0C	; 12
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <summer_play_note+0x4ce>
    10f0:	07 c0       	rjmp	.+14     	; 0x1100 <summer_play_note+0x4e6>
    10f2:	2f e7       	ldi	r18, 0x7F	; 127
    10f4:	8a e1       	ldi	r24, 0x1A	; 26
    10f6:	96 e0       	ldi	r25, 0x06	; 6
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	80 40       	sbci	r24, 0x00	; 0
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <summer_play_note+0x4de>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <summer_play_note+0x4e8>
    1102:	00 00       	nop
			break;
		case '8':
			_delay_ms(125);
			break;
	}
	summer_off();
    1104:	0e 94 0b 06 	call	0xc16	; 0xc16 <summer_off>
    1108:	2f e7       	ldi	r18, 0x7F	; 127
    110a:	88 e3       	ldi	r24, 0x38	; 56
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	80 40       	sbci	r24, 0x00	; 0
    1112:	90 40       	sbci	r25, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <summer_play_note+0x4f4>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <summer_play_note+0x4fe>
    1118:	00 00       	nop
	_delay_ms(50);
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <summer_play_tune>:
}

/************************************************************************/
/* @brief Plays the song from note buffer                              */
/************************************************************************/
void summer_play_tune(void) {
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	c9 ee       	ldi	r28, 0xE9	; 233
    1128:	d2 e0       	ldi	r29, 0x02	; 2
	for (uint8_t i = 0; i < MAX_SONG_LENGTH; i++) {
    112a:	10 e0       	ldi	r17, 0x00	; 0
		if (note_buf[i][0] == '-') {
    112c:	88 81       	ld	r24, Y
    112e:	8d 32       	cpi	r24, 0x2D	; 45
    1130:	39 f0       	breq	.+14     	; 0x1140 <summer_play_tune+0x20>
			break;
		}
		summer_play_note(note_buf[i]);
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 0d 06 	call	0xc1a	; 0xc1a <summer_play_note>

/************************************************************************/
/* @brief Plays the song from note buffer                              */
/************************************************************************/
void summer_play_tune(void) {
	for (uint8_t i = 0; i < MAX_SONG_LENGTH; i++) {
    1138:	1f 5f       	subi	r17, 0xFF	; 255
    113a:	24 96       	adiw	r28, 0x04	; 4
    113c:	10 38       	cpi	r17, 0x80	; 128
    113e:	b1 f7       	brne	.-20     	; 0x112c <summer_play_tune+0xc>
			break;
		}
		summer_play_note(note_buf[i]);
	}
	summer_off();
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
		if (note_buf[i][0] == '-') {
			break;
		}
		summer_play_note(note_buf[i]);
	}
	summer_off();
    1146:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <summer_off>

0000114a <summer_clear_tune>:
}

/************************************************************************/
/* @brief Clears the song from note buffer                              */
/************************************************************************/
void summer_clear_tune(void) {
    114a:	e9 ee       	ldi	r30, 0xE9	; 233
    114c:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < MAX_SONG_LENGTH; i++) {
    114e:	80 e0       	ldi	r24, 0x00	; 0
		note_buf[i][0] = '-';
    1150:	9d e2       	ldi	r25, 0x2D	; 45
    1152:	90 83       	st	Z, r25

/************************************************************************/
/* @brief Clears the song from note buffer                              */
/************************************************************************/
void summer_clear_tune(void) {
	for (uint8_t i = 0; i < MAX_SONG_LENGTH; i++) {
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	34 96       	adiw	r30, 0x04	; 4
    1158:	80 38       	cpi	r24, 0x80	; 128
    115a:	d9 f7       	brne	.-10     	; 0x1152 <summer_clear_tune+0x8>
		note_buf[i][0] = '-';
	}
    115c:	08 95       	ret

0000115e <summer_init>:
uint8_t INDEX = 0;

/************************************************************************/
/* @brief Initializes the summer                                        */
/************************************************************************/
void summer_init(uint16_t hz) {
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	ec 01       	movw	r28, r24
	summer_clear_tune();
    1164:	0e 94 a5 08 	call	0x114a	; 0x114a <summer_clear_tune>

	// Set output
	SUMMER_DDR |= (1<<SUMMER_PIN);
    1168:	21 9a       	sbi	0x04, 1	; 4
	// Setup timer
	// Set bits and set prescaler to 64
	TCCR1B |= (1<<WGM12) | (1<<WGM10) | (1<<CS10);
    116a:	e1 e8       	ldi	r30, 0x81	; 129
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	89 60       	ori	r24, 0x09	; 9
    1172:	80 83       	st	Z, r24
	// Set OCR0B register frequency
	OCR1A = hz;
    1174:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1178:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	// Set bits COM0B0 and WGM01 in TCCR0A register
	TCCR1A |= (1<<SUMMER_COM);
    117c:	e0 e8       	ldi	r30, 0x80	; 128
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 64       	ori	r24, 0x40	; 64
    1184:	80 83       	st	Z, r24
	// Disable speaker output
	SUMMER_DDR &= ~(1<<SUMMER_PIN);
    1186:	21 98       	cbi	0x04, 1	; 4

}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <spi_master_init>:
/* @brief Initializes the SPI                                                  */
/************************************************************************/
void spi_master_init(void) {
	
	// SCK, MOSI, SS as outputs
	DDRB  |= (1<<2) | (1<<3)| (1<<5) | (1<<1) | (1<<0);
    118e:	84 b1       	in	r24, 0x04	; 4
    1190:	8f 62       	ori	r24, 0x2F	; 47
    1192:	84 b9       	out	0x04, r24	; 4
	// MISO as input
	DDRB  &= ~(1<<4);   
    1194:	24 98       	cbi	0x04, 4	; 4
	// Set Display low                        
	PORTB &= ~(1<<1);	
    1196:	29 98       	cbi	0x05, 1	; 5
	// Enable master
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    1198:	8c b5       	in	r24, 0x2c	; 44
    119a:	81 65       	ori	r24, 0x51	; 81
    119c:	8c bd       	out	0x2c, r24	; 44
    119e:	08 95       	ret

000011a0 <spi_txrx>:
/* @return The byte received from SPI                                   */
/************************************************************************/
uint8_t spi_txrx(uint8_t byte) {
	uint8_t rx = 0;
	// send the data
	SPDR = byte;
    11a0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    11a2:	0d b4       	in	r0, 0x2d	; 45
    11a4:	07 fe       	sbrs	r0, 7
    11a6:	fd cf       	rjmp	.-6      	; 0x11a2 <spi_txrx+0x2>
	//return received data
	rx = SPDR;
    11a8:	8e b5       	in	r24, 0x2e	; 46
	return rx;
    11aa:	08 95       	ret

000011ac <srf02_start_ranging>:

/************************************************************************/
/* @brief Initializes the sensors and starts ranging on both            */
/************************************************************************/
void srf02_start_ranging(void) {
		cli();
    11ac:	f8 94       	cli
		// Front sensor initialization
		i2c_start(SRF02_FRONT + I2C_WRITE);
    11ae:	80 ee       	ldi	r24, 0xE0	; 224
    11b0:	0e 94 30 09 	call	0x1260	; 0x1260 <i2c_start>
		
		// Write to cmd reg and write cmd 0x51 to get distance in cm.
		i2c_write(SRF02_CMD);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <i2c_write>
		i2c_write(SRF02_CMD_CM);
    11ba:	81 e5       	ldi	r24, 0x51	; 81
    11bc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <i2c_write>
		// Stop i2c bus
		i2c_stop();
    11c0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <i2c_stop>

		// Back sensor initialization
		i2c_start(SRF02_BACK + I2C_WRITE);
    11c4:	8a ee       	ldi	r24, 0xEA	; 234
    11c6:	0e 94 30 09 	call	0x1260	; 0x1260 <i2c_start>
		
		// Write to cmd reg and write cmd 0x51 to get distance in cm.
		i2c_write(SRF02_CMD);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <i2c_write>
		i2c_write(SRF02_CMD_CM);
    11d0:	81 e5       	ldi	r24, 0x51	; 81
    11d2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <i2c_write>
		// Stop i2c bus
		i2c_stop();
    11d6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <i2c_stop>
		sei();
    11da:	78 94       	sei
    11dc:	2f e7       	ldi	r18, 0x7F	; 127
    11de:	85 eb       	ldi	r24, 0xB5	; 181
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	80 40       	sbci	r24, 0x00	; 0
    11e6:	90 40       	sbci	r25, 0x00	; 0
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <srf02_start_ranging+0x36>
    11ea:	00 c0       	rjmp	.+0      	; 0x11ec <srf02_start_ranging+0x40>
    11ec:	00 00       	nop
    11ee:	08 95       	ret

000011f0 <srf02_read_distance_front>:

/************************************************************************/
/* @brief Reads the front distance from SRF02 sonic distance sensor     */
/* @return The front distance in cm, 0-255                              */
/************************************************************************/
uint8_t srf02_read_distance_front(void) {
    11f0:	cf 93       	push	r28
	uint8_t byte_low = 0x00;
	
	// Set registers to read and wait for completed ranging
	i2c_start(SRF02_FRONT + I2C_WRITE);
    11f2:	80 ee       	ldi	r24, 0xE0	; 224
    11f4:	0e 94 30 09 	call	0x1260	; 0x1260 <i2c_start>
	i2c_write(SRF02_LOW_RANGE);
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <i2c_write>
	
	// Read from registers
	i2c_rep_start(SRF02_FRONT + I2C_READ);
    11fe:	81 ee       	ldi	r24, 0xE1	; 225
    1200:	0e 94 52 09 	call	0x12a4	; 0x12a4 <i2c_rep_start>
	
	byte_low = i2c_readAck();
    1204:	0e 94 6d 09 	call	0x12da	; 0x12da <i2c_readAck>
    1208:	c8 2f       	mov	r28, r24
	i2c_readNak();
    120a:	0e 94 77 09 	call	0x12ee	; 0x12ee <i2c_readNak>
	i2c_stop();
    120e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <i2c_stop>
	// Counter underflows
	if (byte_low < 12) {
    1212:	cc 30       	cpi	r28, 0x0C	; 12
    1214:	18 f0       	brcs	.+6      	; 0x121c <srf02_read_distance_front+0x2c>
		byte_low = 0;
	} 
	else {
		byte_low -= 12;
    1216:	84 ef       	ldi	r24, 0xF4	; 244
    1218:	8c 0f       	add	r24, r28
    121a:	01 c0       	rjmp	.+2      	; 0x121e <srf02_read_distance_front+0x2e>
	byte_low = i2c_readAck();
	i2c_readNak();
	i2c_stop();
	// Counter underflows
	if (byte_low < 12) {
		byte_low = 0;
    121c:	80 e0       	ldi	r24, 0x00	; 0
	} 
	else {
		byte_low -= 12;
	}
	return byte_low;
}
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <srf02_read_distance_back>:

/************************************************************************/
/* @brief Reads the back distance from SRF02 sonic distance sensor      */
/* @return The back distance in cm, 0-255                               */
/************************************************************************/
uint8_t srf02_read_distance_back(void) {
    1222:	cf 93       	push	r28
	uint8_t byte_low = 0x00;
	
	// Set registers to read and poll for completed ranging
	i2c_start(SRF02_BACK + I2C_WRITE);
    1224:	8a ee       	ldi	r24, 0xEA	; 234
    1226:	0e 94 30 09 	call	0x1260	; 0x1260 <i2c_start>
	i2c_write(SRF02_LOW_RANGE);
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <i2c_write>
	
	// Read from registers
	i2c_rep_start(SRF02_BACK + I2C_READ);
    1230:	8b ee       	ldi	r24, 0xEB	; 235
    1232:	0e 94 52 09 	call	0x12a4	; 0x12a4 <i2c_rep_start>
	
	byte_low = i2c_readAck();
    1236:	0e 94 6d 09 	call	0x12da	; 0x12da <i2c_readAck>
    123a:	c8 2f       	mov	r28, r24
	i2c_readNak();
    123c:	0e 94 77 09 	call	0x12ee	; 0x12ee <i2c_readNak>
	i2c_stop();
    1240:	0e 94 54 09 	call	0x12a8	; 0x12a8 <i2c_stop>
	// Counter underflows
	if (byte_low < 12) {
    1244:	cc 30       	cpi	r28, 0x0C	; 12
    1246:	18 f0       	brcs	.+6      	; 0x124e <srf02_read_distance_back+0x2c>
		byte_low = 0;
	} 
	else {
		byte_low -= 12;
    1248:	84 ef       	ldi	r24, 0xF4	; 244
    124a:	8c 0f       	add	r24, r28
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <srf02_read_distance_back+0x2e>
	byte_low = i2c_readAck();
	i2c_readNak();
	i2c_stop();
	// Counter underflows
	if (byte_low < 12) {
		byte_low = 0;
    124e:	80 e0       	ldi	r24, 0x00	; 0
	} 
	else {
		byte_low -= 12;
	}
	return byte_low;
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <i2c_init>:
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1254:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1258:	80 e2       	ldi	r24, 0x20	; 32
    125a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    125e:	08 95       	ret

00001260 <i2c_start>:
    1260:	94 ea       	ldi	r25, 0xA4	; 164
    1262:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1266:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    126a:	97 ff       	sbrs	r25, 7
    126c:	fc cf       	rjmp	.-8      	; 0x1266 <i2c_start+0x6>
    126e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1272:	98 7f       	andi	r25, 0xF8	; 248
    1274:	98 30       	cpi	r25, 0x08	; 8
    1276:	21 f0       	breq	.+8      	; 0x1280 <i2c_start+0x20>
    1278:	90 31       	cpi	r25, 0x10	; 16
    127a:	11 f0       	breq	.+4      	; 0x1280 <i2c_start+0x20>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	08 95       	ret
    1280:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1284:	84 e8       	ldi	r24, 0x84	; 132
    1286:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    128a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    128e:	87 ff       	sbrs	r24, 7
    1290:	fc cf       	rjmp	.-8      	; 0x128a <i2c_start+0x2a>
    1292:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1296:	88 7f       	andi	r24, 0xF8	; 248
    1298:	88 31       	cpi	r24, 0x18	; 24
    129a:	11 f0       	breq	.+4      	; 0x12a0 <i2c_start+0x40>
    129c:	80 34       	cpi	r24, 0x40	; 64
    129e:	71 f7       	brne	.-36     	; 0x127c <i2c_start+0x1c>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    12a4:	0c 94 30 09 	jmp	0x1260	; 0x1260 <i2c_start>

000012a8 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    12a8:	84 e9       	ldi	r24, 0x94	; 148
    12aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    12ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12b2:	84 fd       	sbrc	r24, 4
    12b4:	fc cf       	rjmp	.-8      	; 0x12ae <i2c_stop+0x6>

}/* i2c_stop */
    12b6:	08 95       	ret

000012b8 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    12b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    12bc:	84 e8       	ldi	r24, 0x84	; 132
    12be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    12c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12c6:	87 ff       	sbrs	r24, 7
    12c8:	fc cf       	rjmp	.-8      	; 0x12c2 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    12ca:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    12ce:	98 7f       	andi	r25, 0xF8	; 248
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	98 32       	cpi	r25, 0x28	; 40
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <i2c_write+0x20>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    12d8:	08 95       	ret

000012da <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    12da:	84 ec       	ldi	r24, 0xC4	; 196
    12dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
    12e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12e4:	87 ff       	sbrs	r24, 7
    12e6:	fc cf       	rjmp	.-8      	; 0x12e0 <i2c_readAck+0x6>

    return TWDR;
    12e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
    12ec:	08 95       	ret

000012ee <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    12ee:	84 e8       	ldi	r24, 0x84	; 132
    12f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
    12f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12f8:	87 ff       	sbrs	r24, 7
    12fa:	fc cf       	rjmp	.-8      	; 0x12f4 <i2c_readNak+0x6>
	
    return TWDR;
    12fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
    1300:	08 95       	ret

00001302 <usart_init>:

/************************************************************************/
/* @brief Initializes USART                                             */
/************************************************************************/
void usart_init() {
	UBRR0H = 0x00;
    1302:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD;
    1306:	83 e3       	ldi	r24, 0x33	; 51
    1308:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Enable receiver and transmitter, including receiver interrupt
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    130c:	e1 ec       	ldi	r30, 0xC1	; 193
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	88 69       	ori	r24, 0x98	; 152
    1314:	80 83       	st	Z, r24
	// Set fram format: 8data, 2stop bit
	UCSR0C |= (1<<USBS0) | (3<<UCSZ00);
    1316:	e2 ec       	ldi	r30, 0xC2	; 194
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8e 60       	ori	r24, 0x0E	; 14
    131e:	80 83       	st	Z, r24
    1320:	08 95       	ret

00001322 <usart_send_byte>:

/************************************************************************/
/* @brief Sends a byte using USART                                      */
/************************************************************************/
void usart_send_byte(uint8_t byte) {
	while(!(UCSR0A & (1<<UDRE0)));
    1322:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1326:	95 ff       	sbrs	r25, 5
    1328:	fc cf       	rjmp	.-8      	; 0x1322 <usart_send_byte>
	UDR0 = byte;
    132a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    132e:	08 95       	ret

00001330 <usart_recv_byte>:
/************************************************************************/
/* @brief Receives a byte from USART                                    */
/* @return Received byte or 0x00                                        */
/************************************************************************/
uint8_t usart_recv_byte(void) {
	if (UCSR0A & (1<<RXC0)) {
    1330:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1334:	87 ff       	sbrs	r24, 7
    1336:	03 c0       	rjmp	.+6      	; 0x133e <usart_recv_byte+0xe>
		return UDR0;
    1338:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    133c:	08 95       	ret
	}
	return 0x00;
    133e:	80 e0       	ldi	r24, 0x00	; 0
}
    1340:	08 95       	ret

00001342 <usart_send_string>:
/* @brief Sends a string using USART                                    */
/* @string String to be sent over USART                                 */
/* @start Position to start reading from                                */
/* @stop Position to stop reading when at                               */
/************************************************************************/
void usart_send_string(char *string, uint8_t start, uint8_t stop) {
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	8c 01       	movw	r16, r24
    134c:	c6 2f       	mov	r28, r22
    134e:	d4 2f       	mov	r29, r20
	for (uint8_t i = start; i < stop; i++) {
    1350:	cd 17       	cp	r28, r29
    1352:	40 f4       	brcc	.+16     	; 0x1364 <usart_send_string+0x22>
		usart_send_byte((uint8_t) string[i]);
    1354:	f8 01       	movw	r30, r16
    1356:	ec 0f       	add	r30, r28
    1358:	f1 1d       	adc	r31, r1
    135a:	80 81       	ld	r24, Z
    135c:	0e 94 91 09 	call	0x1322	; 0x1322 <usart_send_byte>
/* @string String to be sent over USART                                 */
/* @start Position to start reading from                                */
/* @stop Position to stop reading when at                               */
/************************************************************************/
void usart_send_string(char *string, uint8_t start, uint8_t stop) {
	for (uint8_t i = start; i < stop; i++) {
    1360:	cf 5f       	subi	r28, 0xFF	; 255
    1362:	f6 cf       	rjmp	.-20     	; 0x1350 <usart_send_string+0xe>
		usart_send_byte((uint8_t) string[i]);
	}
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <WDT_Prescaler_Change>:

/************************************************************************/
/* @brief Enables a WDT 1s timeout (8.0Mhz)                             */
/************************************************************************/
void WDT_Prescaler_Change(void) {
	cli();
    136e:	f8 94       	cli
	wdt_reset();
    1370:	a8 95       	wdr
	// Start timed  sequence
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    1372:	e0 e6       	ldi	r30, 0x60	; 96
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	88 61       	ori	r24, 0x18	; 24
    137a:	80 83       	st	Z, r24
	// 32K cycles (~0.25 s)
	WDTCSR = (1<<WDIE) | (1<<WDP2);
    137c:	84 e4       	ldi	r24, 0x44	; 68
    137e:	80 83       	st	Z, r24
	sei();
    1380:	78 94       	sei
    1382:	08 95       	ret

00001384 <display_sensor_readings>:
/* @string PIR sensor status                                            */
/* @string Left trigger status                                          */
/* @string Right trigger status                                         */
/************************************************************************/
void display_sensor_readings(uint8_t dist_f, uint8_t dist_b, 
	uint8_t pir, uint8_t trigg_l, uint8_t trigg_h) {
    1384:	ff 92       	push	r15
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	18 2f       	mov	r17, r24
    1390:	f6 2e       	mov	r15, r22
    1392:	c4 2f       	mov	r28, r20
    1394:	d2 2f       	mov	r29, r18
	display_cursor_home();
    1396:	0e 94 d7 00 	call	0x1ae	; 0x1ae <display_cursor_home>
	printf("F:%03dcm  B:%03dcm", dist_f, dist_b);
    139a:	1f 92       	push	r1
    139c:	ff 92       	push	r15
    139e:	1f 92       	push	r1
    13a0:	1f 93       	push	r17
    13a2:	8a e5       	ldi	r24, 0x5A	; 90
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	9f 93       	push	r25
    13a8:	8f 93       	push	r24
    13aa:	0e 94 3f 0a 	call	0x147e	; 0x147e <printf>
	printf("%01d", trigg_l);
    13ae:	1f 92       	push	r1
    13b0:	df 93       	push	r29
    13b2:	8d e6       	ldi	r24, 0x6D	; 109
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	9f 93       	push	r25
    13b8:	8f 93       	push	r24
    13ba:	0e 94 3f 0a 	call	0x147e	; 0x147e <printf>
	if (pir) {
    13be:	8d b7       	in	r24, 0x3d	; 61
    13c0:	9e b7       	in	r25, 0x3e	; 62
    13c2:	0a 96       	adiw	r24, 0x0a	; 10
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	9e bf       	out	0x3e, r25	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	8d bf       	out	0x3d, r24	; 61
    13ce:	cc 23       	and	r28, r28
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <display_sensor_readings+0x54>
		printf("    Motion    ");
    13d2:	82 e7       	ldi	r24, 0x72	; 114
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <display_sensor_readings+0x58>
	} 
	else {
		printf("  No motion   ");
    13d8:	81 e8       	ldi	r24, 0x81	; 129
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	9f 93       	push	r25
    13de:	8f 93       	push	r24
    13e0:	0e 94 3f 0a 	call	0x147e	; 0x147e <printf>
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
	}
	printf("%01d", trigg_h);
    13e8:	1f 92       	push	r1
    13ea:	0f 93       	push	r16
    13ec:	8d e6       	ldi	r24, 0x6D	; 109
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	9f 93       	push	r25
    13f2:	8f 93       	push	r24
    13f4:	0e 94 3f 0a 	call	0x147e	; 0x147e <printf>
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	08 95       	ret

0000140c <__udivmodqi4>:
    140c:	99 1b       	sub	r25, r25
    140e:	79 e0       	ldi	r23, 0x09	; 9
    1410:	04 c0       	rjmp	.+8      	; 0x141a <__udivmodqi4_ep>

00001412 <__udivmodqi4_loop>:
    1412:	99 1f       	adc	r25, r25
    1414:	96 17       	cp	r25, r22
    1416:	08 f0       	brcs	.+2      	; 0x141a <__udivmodqi4_ep>
    1418:	96 1b       	sub	r25, r22

0000141a <__udivmodqi4_ep>:
    141a:	88 1f       	adc	r24, r24
    141c:	7a 95       	dec	r23
    141e:	c9 f7       	brne	.-14     	; 0x1412 <__udivmodqi4_loop>
    1420:	80 95       	com	r24
    1422:	08 95       	ret

00001424 <strcmp>:
    1424:	fb 01       	movw	r30, r22
    1426:	dc 01       	movw	r26, r24
    1428:	8d 91       	ld	r24, X+
    142a:	01 90       	ld	r0, Z+
    142c:	80 19       	sub	r24, r0
    142e:	01 10       	cpse	r0, r1
    1430:	d9 f3       	breq	.-10     	; 0x1428 <strcmp+0x4>
    1432:	99 0b       	sbc	r25, r25
    1434:	08 95       	ret

00001436 <strcpy>:
    1436:	fb 01       	movw	r30, r22
    1438:	dc 01       	movw	r26, r24
    143a:	01 90       	ld	r0, Z+
    143c:	0d 92       	st	X+, r0
    143e:	00 20       	and	r0, r0
    1440:	e1 f7       	brne	.-8      	; 0x143a <strcpy+0x4>
    1442:	08 95       	ret

00001444 <strncmp>:
    1444:	fb 01       	movw	r30, r22
    1446:	dc 01       	movw	r26, r24
    1448:	41 50       	subi	r20, 0x01	; 1
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	30 f0       	brcs	.+12     	; 0x145a <strncmp+0x16>
    144e:	8d 91       	ld	r24, X+
    1450:	01 90       	ld	r0, Z+
    1452:	80 19       	sub	r24, r0
    1454:	19 f4       	brne	.+6      	; 0x145c <strncmp+0x18>
    1456:	00 20       	and	r0, r0
    1458:	b9 f7       	brne	.-18     	; 0x1448 <strncmp+0x4>
    145a:	88 1b       	sub	r24, r24
    145c:	99 0b       	sbc	r25, r25
    145e:	08 95       	ret

00001460 <strncpy>:
    1460:	fb 01       	movw	r30, r22
    1462:	dc 01       	movw	r26, r24
    1464:	41 50       	subi	r20, 0x01	; 1
    1466:	50 40       	sbci	r21, 0x00	; 0
    1468:	48 f0       	brcs	.+18     	; 0x147c <strncpy+0x1c>
    146a:	01 90       	ld	r0, Z+
    146c:	0d 92       	st	X+, r0
    146e:	00 20       	and	r0, r0
    1470:	c9 f7       	brne	.-14     	; 0x1464 <strncpy+0x4>
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <strncpy+0x16>
    1474:	1d 92       	st	X+, r1
    1476:	41 50       	subi	r20, 0x01	; 1
    1478:	50 40       	sbci	r21, 0x00	; 0
    147a:	e0 f7       	brcc	.-8      	; 0x1474 <strncpy+0x14>
    147c:	08 95       	ret

0000147e <printf>:
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e4       	ldi	r30, 0x45	; 69
    1484:	fa e0       	ldi	r31, 0x0A	; 10
    1486:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__prologue_saves__+0x20>
    148a:	ae 01       	movw	r20, r28
    148c:	4b 5f       	subi	r20, 0xFB	; 251
    148e:	5f 4f       	sbci	r21, 0xFF	; 255
    1490:	fa 01       	movw	r30, r20
    1492:	61 91       	ld	r22, Z+
    1494:	71 91       	ld	r23, Z+
    1496:	af 01       	movw	r20, r30
    1498:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <__iob+0x2>
    149c:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <__iob+0x3>
    14a0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <vfprintf>
    14a4:	e2 e0       	ldi	r30, 0x02	; 2
    14a6:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__epilogue_restores__+0x20>

000014aa <sprintf>:
    14aa:	ae e0       	ldi	r26, 0x0E	; 14
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb e5       	ldi	r30, 0x5B	; 91
    14b0:	fa e0       	ldi	r31, 0x0A	; 10
    14b2:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__prologue_saves__+0x1c>
    14b6:	0d 89       	ldd	r16, Y+21	; 0x15
    14b8:	1e 89       	ldd	r17, Y+22	; 0x16
    14ba:	86 e0       	ldi	r24, 0x06	; 6
    14bc:	8c 83       	std	Y+4, r24	; 0x04
    14be:	1a 83       	std	Y+2, r17	; 0x02
    14c0:	09 83       	std	Y+1, r16	; 0x01
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	9f e7       	ldi	r25, 0x7F	; 127
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	ae 01       	movw	r20, r28
    14cc:	47 5e       	subi	r20, 0xE7	; 231
    14ce:	5f 4f       	sbci	r21, 0xFF	; 255
    14d0:	6f 89       	ldd	r22, Y+23	; 0x17
    14d2:	78 8d       	ldd	r23, Y+24	; 0x18
    14d4:	ce 01       	movw	r24, r28
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <vfprintf>
    14dc:	ef 81       	ldd	r30, Y+7	; 0x07
    14de:	f8 85       	ldd	r31, Y+8	; 0x08
    14e0:	e0 0f       	add	r30, r16
    14e2:	f1 1f       	adc	r31, r17
    14e4:	10 82       	st	Z, r1
    14e6:	2e 96       	adiw	r28, 0x0e	; 14
    14e8:	e4 e0       	ldi	r30, 0x04	; 4
    14ea:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__epilogue_restores__+0x1c>

000014ee <vfprintf>:
    14ee:	ab e0       	ldi	r26, 0x0B	; 11
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ed e7       	ldi	r30, 0x7D	; 125
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__prologue_saves__>
    14fa:	6c 01       	movw	r12, r24
    14fc:	7b 01       	movw	r14, r22
    14fe:	8a 01       	movw	r16, r20
    1500:	fc 01       	movw	r30, r24
    1502:	17 82       	std	Z+7, r1	; 0x07
    1504:	16 82       	std	Z+6, r1	; 0x06
    1506:	83 81       	ldd	r24, Z+3	; 0x03
    1508:	81 ff       	sbrs	r24, 1
    150a:	cc c1       	rjmp	.+920    	; 0x18a4 <vfprintf+0x3b6>
    150c:	ce 01       	movw	r24, r28
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	3c 01       	movw	r6, r24
    1512:	f6 01       	movw	r30, r12
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	f7 01       	movw	r30, r14
    1518:	93 fd       	sbrc	r25, 3
    151a:	85 91       	lpm	r24, Z+
    151c:	93 ff       	sbrs	r25, 3
    151e:	81 91       	ld	r24, Z+
    1520:	7f 01       	movw	r14, r30
    1522:	88 23       	and	r24, r24
    1524:	09 f4       	brne	.+2      	; 0x1528 <vfprintf+0x3a>
    1526:	ba c1       	rjmp	.+884    	; 0x189c <vfprintf+0x3ae>
    1528:	85 32       	cpi	r24, 0x25	; 37
    152a:	39 f4       	brne	.+14     	; 0x153a <vfprintf+0x4c>
    152c:	93 fd       	sbrc	r25, 3
    152e:	85 91       	lpm	r24, Z+
    1530:	93 ff       	sbrs	r25, 3
    1532:	81 91       	ld	r24, Z+
    1534:	7f 01       	movw	r14, r30
    1536:	85 32       	cpi	r24, 0x25	; 37
    1538:	29 f4       	brne	.+10     	; 0x1544 <vfprintf+0x56>
    153a:	b6 01       	movw	r22, r12
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    1542:	e7 cf       	rjmp	.-50     	; 0x1512 <vfprintf+0x24>
    1544:	91 2c       	mov	r9, r1
    1546:	21 2c       	mov	r2, r1
    1548:	31 2c       	mov	r3, r1
    154a:	ff e1       	ldi	r31, 0x1F	; 31
    154c:	f3 15       	cp	r31, r3
    154e:	d8 f0       	brcs	.+54     	; 0x1586 <vfprintf+0x98>
    1550:	8b 32       	cpi	r24, 0x2B	; 43
    1552:	79 f0       	breq	.+30     	; 0x1572 <vfprintf+0x84>
    1554:	38 f4       	brcc	.+14     	; 0x1564 <vfprintf+0x76>
    1556:	80 32       	cpi	r24, 0x20	; 32
    1558:	79 f0       	breq	.+30     	; 0x1578 <vfprintf+0x8a>
    155a:	83 32       	cpi	r24, 0x23	; 35
    155c:	a1 f4       	brne	.+40     	; 0x1586 <vfprintf+0x98>
    155e:	23 2d       	mov	r18, r3
    1560:	20 61       	ori	r18, 0x10	; 16
    1562:	1d c0       	rjmp	.+58     	; 0x159e <vfprintf+0xb0>
    1564:	8d 32       	cpi	r24, 0x2D	; 45
    1566:	61 f0       	breq	.+24     	; 0x1580 <vfprintf+0x92>
    1568:	80 33       	cpi	r24, 0x30	; 48
    156a:	69 f4       	brne	.+26     	; 0x1586 <vfprintf+0x98>
    156c:	23 2d       	mov	r18, r3
    156e:	21 60       	ori	r18, 0x01	; 1
    1570:	16 c0       	rjmp	.+44     	; 0x159e <vfprintf+0xb0>
    1572:	83 2d       	mov	r24, r3
    1574:	82 60       	ori	r24, 0x02	; 2
    1576:	38 2e       	mov	r3, r24
    1578:	e3 2d       	mov	r30, r3
    157a:	e4 60       	ori	r30, 0x04	; 4
    157c:	3e 2e       	mov	r3, r30
    157e:	2a c0       	rjmp	.+84     	; 0x15d4 <vfprintf+0xe6>
    1580:	f3 2d       	mov	r31, r3
    1582:	f8 60       	ori	r31, 0x08	; 8
    1584:	1d c0       	rjmp	.+58     	; 0x15c0 <vfprintf+0xd2>
    1586:	37 fc       	sbrc	r3, 7
    1588:	2d c0       	rjmp	.+90     	; 0x15e4 <vfprintf+0xf6>
    158a:	20 ed       	ldi	r18, 0xD0	; 208
    158c:	28 0f       	add	r18, r24
    158e:	2a 30       	cpi	r18, 0x0A	; 10
    1590:	40 f0       	brcs	.+16     	; 0x15a2 <vfprintf+0xb4>
    1592:	8e 32       	cpi	r24, 0x2E	; 46
    1594:	b9 f4       	brne	.+46     	; 0x15c4 <vfprintf+0xd6>
    1596:	36 fc       	sbrc	r3, 6
    1598:	81 c1       	rjmp	.+770    	; 0x189c <vfprintf+0x3ae>
    159a:	23 2d       	mov	r18, r3
    159c:	20 64       	ori	r18, 0x40	; 64
    159e:	32 2e       	mov	r3, r18
    15a0:	19 c0       	rjmp	.+50     	; 0x15d4 <vfprintf+0xe6>
    15a2:	36 fe       	sbrs	r3, 6
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <vfprintf+0xc4>
    15a6:	8a e0       	ldi	r24, 0x0A	; 10
    15a8:	98 9e       	mul	r9, r24
    15aa:	20 0d       	add	r18, r0
    15ac:	11 24       	eor	r1, r1
    15ae:	92 2e       	mov	r9, r18
    15b0:	11 c0       	rjmp	.+34     	; 0x15d4 <vfprintf+0xe6>
    15b2:	ea e0       	ldi	r30, 0x0A	; 10
    15b4:	2e 9e       	mul	r2, r30
    15b6:	20 0d       	add	r18, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	22 2e       	mov	r2, r18
    15bc:	f3 2d       	mov	r31, r3
    15be:	f0 62       	ori	r31, 0x20	; 32
    15c0:	3f 2e       	mov	r3, r31
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <vfprintf+0xe6>
    15c4:	8c 36       	cpi	r24, 0x6C	; 108
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <vfprintf+0xe2>
    15c8:	83 2d       	mov	r24, r3
    15ca:	80 68       	ori	r24, 0x80	; 128
    15cc:	38 2e       	mov	r3, r24
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0xe6>
    15d0:	88 36       	cpi	r24, 0x68	; 104
    15d2:	41 f4       	brne	.+16     	; 0x15e4 <vfprintf+0xf6>
    15d4:	f7 01       	movw	r30, r14
    15d6:	93 fd       	sbrc	r25, 3
    15d8:	85 91       	lpm	r24, Z+
    15da:	93 ff       	sbrs	r25, 3
    15dc:	81 91       	ld	r24, Z+
    15de:	7f 01       	movw	r14, r30
    15e0:	81 11       	cpse	r24, r1
    15e2:	b3 cf       	rjmp	.-154    	; 0x154a <vfprintf+0x5c>
    15e4:	98 2f       	mov	r25, r24
    15e6:	9f 7d       	andi	r25, 0xDF	; 223
    15e8:	95 54       	subi	r25, 0x45	; 69
    15ea:	93 30       	cpi	r25, 0x03	; 3
    15ec:	28 f4       	brcc	.+10     	; 0x15f8 <vfprintf+0x10a>
    15ee:	0c 5f       	subi	r16, 0xFC	; 252
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	9f e3       	ldi	r25, 0x3F	; 63
    15f4:	99 83       	std	Y+1, r25	; 0x01
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <vfprintf+0x124>
    15f8:	83 36       	cpi	r24, 0x63	; 99
    15fa:	31 f0       	breq	.+12     	; 0x1608 <vfprintf+0x11a>
    15fc:	83 37       	cpi	r24, 0x73	; 115
    15fe:	71 f0       	breq	.+28     	; 0x161c <vfprintf+0x12e>
    1600:	83 35       	cpi	r24, 0x53	; 83
    1602:	09 f0       	breq	.+2      	; 0x1606 <vfprintf+0x118>
    1604:	59 c0       	rjmp	.+178    	; 0x16b8 <vfprintf+0x1ca>
    1606:	21 c0       	rjmp	.+66     	; 0x164a <vfprintf+0x15c>
    1608:	f8 01       	movw	r30, r16
    160a:	80 81       	ld	r24, Z
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0e 5f       	subi	r16, 0xFE	; 254
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	88 24       	eor	r8, r8
    1614:	83 94       	inc	r8
    1616:	91 2c       	mov	r9, r1
    1618:	53 01       	movw	r10, r6
    161a:	13 c0       	rjmp	.+38     	; 0x1642 <vfprintf+0x154>
    161c:	28 01       	movw	r4, r16
    161e:	f2 e0       	ldi	r31, 0x02	; 2
    1620:	4f 0e       	add	r4, r31
    1622:	51 1c       	adc	r5, r1
    1624:	f8 01       	movw	r30, r16
    1626:	a0 80       	ld	r10, Z
    1628:	b1 80       	ldd	r11, Z+1	; 0x01
    162a:	36 fe       	sbrs	r3, 6
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <vfprintf+0x146>
    162e:	69 2d       	mov	r22, r9
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0x14a>
    1634:	6f ef       	ldi	r22, 0xFF	; 255
    1636:	7f ef       	ldi	r23, 0xFF	; 255
    1638:	c5 01       	movw	r24, r10
    163a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <strnlen>
    163e:	4c 01       	movw	r8, r24
    1640:	82 01       	movw	r16, r4
    1642:	f3 2d       	mov	r31, r3
    1644:	ff 77       	andi	r31, 0x7F	; 127
    1646:	3f 2e       	mov	r3, r31
    1648:	16 c0       	rjmp	.+44     	; 0x1676 <vfprintf+0x188>
    164a:	28 01       	movw	r4, r16
    164c:	22 e0       	ldi	r18, 0x02	; 2
    164e:	42 0e       	add	r4, r18
    1650:	51 1c       	adc	r5, r1
    1652:	f8 01       	movw	r30, r16
    1654:	a0 80       	ld	r10, Z
    1656:	b1 80       	ldd	r11, Z+1	; 0x01
    1658:	36 fe       	sbrs	r3, 6
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <vfprintf+0x174>
    165c:	69 2d       	mov	r22, r9
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <vfprintf+0x178>
    1662:	6f ef       	ldi	r22, 0xFF	; 255
    1664:	7f ef       	ldi	r23, 0xFF	; 255
    1666:	c5 01       	movw	r24, r10
    1668:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <strnlen_P>
    166c:	4c 01       	movw	r8, r24
    166e:	f3 2d       	mov	r31, r3
    1670:	f0 68       	ori	r31, 0x80	; 128
    1672:	3f 2e       	mov	r3, r31
    1674:	82 01       	movw	r16, r4
    1676:	33 fc       	sbrc	r3, 3
    1678:	1b c0       	rjmp	.+54     	; 0x16b0 <vfprintf+0x1c2>
    167a:	82 2d       	mov	r24, r2
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	88 16       	cp	r8, r24
    1680:	99 06       	cpc	r9, r25
    1682:	b0 f4       	brcc	.+44     	; 0x16b0 <vfprintf+0x1c2>
    1684:	b6 01       	movw	r22, r12
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    168e:	2a 94       	dec	r2
    1690:	f4 cf       	rjmp	.-24     	; 0x167a <vfprintf+0x18c>
    1692:	f5 01       	movw	r30, r10
    1694:	37 fc       	sbrc	r3, 7
    1696:	85 91       	lpm	r24, Z+
    1698:	37 fe       	sbrs	r3, 7
    169a:	81 91       	ld	r24, Z+
    169c:	5f 01       	movw	r10, r30
    169e:	b6 01       	movw	r22, r12
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    16a6:	21 10       	cpse	r2, r1
    16a8:	2a 94       	dec	r2
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	82 1a       	sub	r8, r18
    16ae:	91 08       	sbc	r9, r1
    16b0:	81 14       	cp	r8, r1
    16b2:	91 04       	cpc	r9, r1
    16b4:	71 f7       	brne	.-36     	; 0x1692 <vfprintf+0x1a4>
    16b6:	e8 c0       	rjmp	.+464    	; 0x1888 <vfprintf+0x39a>
    16b8:	84 36       	cpi	r24, 0x64	; 100
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <vfprintf+0x1d2>
    16bc:	89 36       	cpi	r24, 0x69	; 105
    16be:	41 f5       	brne	.+80     	; 0x1710 <vfprintf+0x222>
    16c0:	f8 01       	movw	r30, r16
    16c2:	37 fe       	sbrs	r3, 7
    16c4:	07 c0       	rjmp	.+14     	; 0x16d4 <vfprintf+0x1e6>
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	93 81       	ldd	r25, Z+3	; 0x03
    16ce:	0c 5f       	subi	r16, 0xFC	; 252
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	08 c0       	rjmp	.+16     	; 0x16e4 <vfprintf+0x1f6>
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	07 2e       	mov	r0, r23
    16da:	00 0c       	add	r0, r0
    16dc:	88 0b       	sbc	r24, r24
    16de:	99 0b       	sbc	r25, r25
    16e0:	0e 5f       	subi	r16, 0xFE	; 254
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	f3 2d       	mov	r31, r3
    16e6:	ff 76       	andi	r31, 0x6F	; 111
    16e8:	3f 2e       	mov	r3, r31
    16ea:	97 ff       	sbrs	r25, 7
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x212>
    16ee:	90 95       	com	r25
    16f0:	80 95       	com	r24
    16f2:	70 95       	com	r23
    16f4:	61 95       	neg	r22
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	f0 68       	ori	r31, 0x80	; 128
    16fe:	3f 2e       	mov	r3, r31
    1700:	2a e0       	ldi	r18, 0x0A	; 10
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	a3 01       	movw	r20, r6
    1706:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__ultoa_invert>
    170a:	88 2e       	mov	r8, r24
    170c:	86 18       	sub	r8, r6
    170e:	45 c0       	rjmp	.+138    	; 0x179a <vfprintf+0x2ac>
    1710:	85 37       	cpi	r24, 0x75	; 117
    1712:	31 f4       	brne	.+12     	; 0x1720 <vfprintf+0x232>
    1714:	23 2d       	mov	r18, r3
    1716:	2f 7e       	andi	r18, 0xEF	; 239
    1718:	b2 2e       	mov	r11, r18
    171a:	2a e0       	ldi	r18, 0x0A	; 10
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	25 c0       	rjmp	.+74     	; 0x176a <vfprintf+0x27c>
    1720:	93 2d       	mov	r25, r3
    1722:	99 7f       	andi	r25, 0xF9	; 249
    1724:	b9 2e       	mov	r11, r25
    1726:	8f 36       	cpi	r24, 0x6F	; 111
    1728:	c1 f0       	breq	.+48     	; 0x175a <vfprintf+0x26c>
    172a:	18 f4       	brcc	.+6      	; 0x1732 <vfprintf+0x244>
    172c:	88 35       	cpi	r24, 0x58	; 88
    172e:	79 f0       	breq	.+30     	; 0x174e <vfprintf+0x260>
    1730:	b5 c0       	rjmp	.+362    	; 0x189c <vfprintf+0x3ae>
    1732:	80 37       	cpi	r24, 0x70	; 112
    1734:	19 f0       	breq	.+6      	; 0x173c <vfprintf+0x24e>
    1736:	88 37       	cpi	r24, 0x78	; 120
    1738:	21 f0       	breq	.+8      	; 0x1742 <vfprintf+0x254>
    173a:	b0 c0       	rjmp	.+352    	; 0x189c <vfprintf+0x3ae>
    173c:	e9 2f       	mov	r30, r25
    173e:	e0 61       	ori	r30, 0x10	; 16
    1740:	be 2e       	mov	r11, r30
    1742:	b4 fe       	sbrs	r11, 4
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <vfprintf+0x272>
    1746:	fb 2d       	mov	r31, r11
    1748:	f4 60       	ori	r31, 0x04	; 4
    174a:	bf 2e       	mov	r11, r31
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <vfprintf+0x272>
    174e:	34 fe       	sbrs	r3, 4
    1750:	0a c0       	rjmp	.+20     	; 0x1766 <vfprintf+0x278>
    1752:	29 2f       	mov	r18, r25
    1754:	26 60       	ori	r18, 0x06	; 6
    1756:	b2 2e       	mov	r11, r18
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <vfprintf+0x278>
    175a:	28 e0       	ldi	r18, 0x08	; 8
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	05 c0       	rjmp	.+10     	; 0x176a <vfprintf+0x27c>
    1760:	20 e1       	ldi	r18, 0x10	; 16
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x27c>
    1766:	20 e1       	ldi	r18, 0x10	; 16
    1768:	32 e0       	ldi	r19, 0x02	; 2
    176a:	f8 01       	movw	r30, r16
    176c:	b7 fe       	sbrs	r11, 7
    176e:	07 c0       	rjmp	.+14     	; 0x177e <vfprintf+0x290>
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	0c 5f       	subi	r16, 0xFC	; 252
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	06 c0       	rjmp	.+12     	; 0x178a <vfprintf+0x29c>
    177e:	60 81       	ld	r22, Z
    1780:	71 81       	ldd	r23, Z+1	; 0x01
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 5f       	subi	r16, 0xFE	; 254
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	a3 01       	movw	r20, r6
    178c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__ultoa_invert>
    1790:	88 2e       	mov	r8, r24
    1792:	86 18       	sub	r8, r6
    1794:	fb 2d       	mov	r31, r11
    1796:	ff 77       	andi	r31, 0x7F	; 127
    1798:	3f 2e       	mov	r3, r31
    179a:	36 fe       	sbrs	r3, 6
    179c:	0d c0       	rjmp	.+26     	; 0x17b8 <vfprintf+0x2ca>
    179e:	23 2d       	mov	r18, r3
    17a0:	2e 7f       	andi	r18, 0xFE	; 254
    17a2:	a2 2e       	mov	r10, r18
    17a4:	89 14       	cp	r8, r9
    17a6:	58 f4       	brcc	.+22     	; 0x17be <vfprintf+0x2d0>
    17a8:	34 fe       	sbrs	r3, 4
    17aa:	0b c0       	rjmp	.+22     	; 0x17c2 <vfprintf+0x2d4>
    17ac:	32 fc       	sbrc	r3, 2
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <vfprintf+0x2d4>
    17b0:	83 2d       	mov	r24, r3
    17b2:	8e 7e       	andi	r24, 0xEE	; 238
    17b4:	a8 2e       	mov	r10, r24
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <vfprintf+0x2d4>
    17b8:	b8 2c       	mov	r11, r8
    17ba:	a3 2c       	mov	r10, r3
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <vfprintf+0x2d6>
    17be:	b8 2c       	mov	r11, r8
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <vfprintf+0x2d6>
    17c2:	b9 2c       	mov	r11, r9
    17c4:	a4 fe       	sbrs	r10, 4
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <vfprintf+0x2f8>
    17c8:	fe 01       	movw	r30, r28
    17ca:	e8 0d       	add	r30, r8
    17cc:	f1 1d       	adc	r31, r1
    17ce:	80 81       	ld	r24, Z
    17d0:	80 33       	cpi	r24, 0x30	; 48
    17d2:	21 f4       	brne	.+8      	; 0x17dc <vfprintf+0x2ee>
    17d4:	9a 2d       	mov	r25, r10
    17d6:	99 7e       	andi	r25, 0xE9	; 233
    17d8:	a9 2e       	mov	r10, r25
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <vfprintf+0x300>
    17dc:	a2 fe       	sbrs	r10, 2
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0x2fe>
    17e0:	b3 94       	inc	r11
    17e2:	b3 94       	inc	r11
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <vfprintf+0x300>
    17e6:	8a 2d       	mov	r24, r10
    17e8:	86 78       	andi	r24, 0x86	; 134
    17ea:	09 f0       	breq	.+2      	; 0x17ee <vfprintf+0x300>
    17ec:	b3 94       	inc	r11
    17ee:	a3 fc       	sbrc	r10, 3
    17f0:	11 c0       	rjmp	.+34     	; 0x1814 <vfprintf+0x326>
    17f2:	a0 fe       	sbrs	r10, 0
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <vfprintf+0x314>
    17f6:	b2 14       	cp	r11, r2
    17f8:	88 f4       	brcc	.+34     	; 0x181c <vfprintf+0x32e>
    17fa:	28 0c       	add	r2, r8
    17fc:	92 2c       	mov	r9, r2
    17fe:	9b 18       	sub	r9, r11
    1800:	0e c0       	rjmp	.+28     	; 0x181e <vfprintf+0x330>
    1802:	b2 14       	cp	r11, r2
    1804:	60 f4       	brcc	.+24     	; 0x181e <vfprintf+0x330>
    1806:	b6 01       	movw	r22, r12
    1808:	80 e2       	ldi	r24, 0x20	; 32
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    1810:	b3 94       	inc	r11
    1812:	f7 cf       	rjmp	.-18     	; 0x1802 <vfprintf+0x314>
    1814:	b2 14       	cp	r11, r2
    1816:	18 f4       	brcc	.+6      	; 0x181e <vfprintf+0x330>
    1818:	2b 18       	sub	r2, r11
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <vfprintf+0x332>
    181c:	98 2c       	mov	r9, r8
    181e:	21 2c       	mov	r2, r1
    1820:	a4 fe       	sbrs	r10, 4
    1822:	10 c0       	rjmp	.+32     	; 0x1844 <vfprintf+0x356>
    1824:	b6 01       	movw	r22, r12
    1826:	80 e3       	ldi	r24, 0x30	; 48
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    182e:	a2 fe       	sbrs	r10, 2
    1830:	17 c0       	rjmp	.+46     	; 0x1860 <vfprintf+0x372>
    1832:	a1 fc       	sbrc	r10, 1
    1834:	03 c0       	rjmp	.+6      	; 0x183c <vfprintf+0x34e>
    1836:	88 e7       	ldi	r24, 0x78	; 120
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <vfprintf+0x352>
    183c:	88 e5       	ldi	r24, 0x58	; 88
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	b6 01       	movw	r22, r12
    1842:	0c c0       	rjmp	.+24     	; 0x185c <vfprintf+0x36e>
    1844:	8a 2d       	mov	r24, r10
    1846:	86 78       	andi	r24, 0x86	; 134
    1848:	59 f0       	breq	.+22     	; 0x1860 <vfprintf+0x372>
    184a:	a1 fe       	sbrs	r10, 1
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <vfprintf+0x364>
    184e:	8b e2       	ldi	r24, 0x2B	; 43
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <vfprintf+0x366>
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	a7 fc       	sbrc	r10, 7
    1856:	8d e2       	ldi	r24, 0x2D	; 45
    1858:	b6 01       	movw	r22, r12
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    1860:	89 14       	cp	r8, r9
    1862:	38 f4       	brcc	.+14     	; 0x1872 <vfprintf+0x384>
    1864:	b6 01       	movw	r22, r12
    1866:	80 e3       	ldi	r24, 0x30	; 48
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    186e:	9a 94       	dec	r9
    1870:	f7 cf       	rjmp	.-18     	; 0x1860 <vfprintf+0x372>
    1872:	8a 94       	dec	r8
    1874:	f3 01       	movw	r30, r6
    1876:	e8 0d       	add	r30, r8
    1878:	f1 1d       	adc	r31, r1
    187a:	80 81       	ld	r24, Z
    187c:	b6 01       	movw	r22, r12
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    1884:	81 10       	cpse	r8, r1
    1886:	f5 cf       	rjmp	.-22     	; 0x1872 <vfprintf+0x384>
    1888:	22 20       	and	r2, r2
    188a:	09 f4       	brne	.+2      	; 0x188e <vfprintf+0x3a0>
    188c:	42 ce       	rjmp	.-892    	; 0x1512 <vfprintf+0x24>
    188e:	b6 01       	movw	r22, r12
    1890:	80 e2       	ldi	r24, 0x20	; 32
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <fputc>
    1898:	2a 94       	dec	r2
    189a:	f6 cf       	rjmp	.-20     	; 0x1888 <vfprintf+0x39a>
    189c:	f6 01       	movw	r30, r12
    189e:	86 81       	ldd	r24, Z+6	; 0x06
    18a0:	97 81       	ldd	r25, Z+7	; 0x07
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <vfprintf+0x3ba>
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	9f ef       	ldi	r25, 0xFF	; 255
    18a8:	2b 96       	adiw	r28, 0x0b	; 11
    18aa:	e2 e1       	ldi	r30, 0x12	; 18
    18ac:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__epilogue_restores__>

000018b0 <strnlen_P>:
    18b0:	fc 01       	movw	r30, r24
    18b2:	05 90       	lpm	r0, Z+
    18b4:	61 50       	subi	r22, 0x01	; 1
    18b6:	70 40       	sbci	r23, 0x00	; 0
    18b8:	01 10       	cpse	r0, r1
    18ba:	d8 f7       	brcc	.-10     	; 0x18b2 <strnlen_P+0x2>
    18bc:	80 95       	com	r24
    18be:	90 95       	com	r25
    18c0:	8e 0f       	add	r24, r30
    18c2:	9f 1f       	adc	r25, r31
    18c4:	08 95       	ret

000018c6 <strnlen>:
    18c6:	fc 01       	movw	r30, r24
    18c8:	61 50       	subi	r22, 0x01	; 1
    18ca:	70 40       	sbci	r23, 0x00	; 0
    18cc:	01 90       	ld	r0, Z+
    18ce:	01 10       	cpse	r0, r1
    18d0:	d8 f7       	brcc	.-10     	; 0x18c8 <strnlen+0x2>
    18d2:	80 95       	com	r24
    18d4:	90 95       	com	r25
    18d6:	8e 0f       	add	r24, r30
    18d8:	9f 1f       	adc	r25, r31
    18da:	08 95       	ret

000018dc <fputc>:
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	fb 01       	movw	r30, r22
    18e6:	23 81       	ldd	r18, Z+3	; 0x03
    18e8:	21 fd       	sbrc	r18, 1
    18ea:	03 c0       	rjmp	.+6      	; 0x18f2 <fputc+0x16>
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	2c c0       	rjmp	.+88     	; 0x194a <fputc+0x6e>
    18f2:	22 ff       	sbrs	r18, 2
    18f4:	16 c0       	rjmp	.+44     	; 0x1922 <fputc+0x46>
    18f6:	46 81       	ldd	r20, Z+6	; 0x06
    18f8:	57 81       	ldd	r21, Z+7	; 0x07
    18fa:	24 81       	ldd	r18, Z+4	; 0x04
    18fc:	35 81       	ldd	r19, Z+5	; 0x05
    18fe:	42 17       	cp	r20, r18
    1900:	53 07       	cpc	r21, r19
    1902:	44 f4       	brge	.+16     	; 0x1914 <fputc+0x38>
    1904:	a0 81       	ld	r26, Z
    1906:	b1 81       	ldd	r27, Z+1	; 0x01
    1908:	9d 01       	movw	r18, r26
    190a:	2f 5f       	subi	r18, 0xFF	; 255
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	31 83       	std	Z+1, r19	; 0x01
    1910:	20 83       	st	Z, r18
    1912:	8c 93       	st	X, r24
    1914:	26 81       	ldd	r18, Z+6	; 0x06
    1916:	37 81       	ldd	r19, Z+7	; 0x07
    1918:	2f 5f       	subi	r18, 0xFF	; 255
    191a:	3f 4f       	sbci	r19, 0xFF	; 255
    191c:	37 83       	std	Z+7, r19	; 0x07
    191e:	26 83       	std	Z+6, r18	; 0x06
    1920:	14 c0       	rjmp	.+40     	; 0x194a <fputc+0x6e>
    1922:	8b 01       	movw	r16, r22
    1924:	ec 01       	movw	r28, r24
    1926:	fb 01       	movw	r30, r22
    1928:	00 84       	ldd	r0, Z+8	; 0x08
    192a:	f1 85       	ldd	r31, Z+9	; 0x09
    192c:	e0 2d       	mov	r30, r0
    192e:	09 95       	icall
    1930:	89 2b       	or	r24, r25
    1932:	e1 f6       	brne	.-72     	; 0x18ec <fputc+0x10>
    1934:	d8 01       	movw	r26, r16
    1936:	16 96       	adiw	r26, 0x06	; 6
    1938:	8d 91       	ld	r24, X+
    193a:	9c 91       	ld	r25, X
    193c:	17 97       	sbiw	r26, 0x07	; 7
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	17 96       	adiw	r26, 0x07	; 7
    1942:	9c 93       	st	X, r25
    1944:	8e 93       	st	-X, r24
    1946:	16 97       	sbiw	r26, 0x06	; 6
    1948:	ce 01       	movw	r24, r28
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	08 95       	ret

00001954 <__ultoa_invert>:
    1954:	fa 01       	movw	r30, r20
    1956:	aa 27       	eor	r26, r26
    1958:	28 30       	cpi	r18, 0x08	; 8
    195a:	51 f1       	breq	.+84     	; 0x19b0 <__ultoa_invert+0x5c>
    195c:	20 31       	cpi	r18, 0x10	; 16
    195e:	81 f1       	breq	.+96     	; 0x19c0 <__ultoa_invert+0x6c>
    1960:	e8 94       	clt
    1962:	6f 93       	push	r22
    1964:	6e 7f       	andi	r22, 0xFE	; 254
    1966:	6e 5f       	subi	r22, 0xFE	; 254
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	8f 4f       	sbci	r24, 0xFF	; 255
    196c:	9f 4f       	sbci	r25, 0xFF	; 255
    196e:	af 4f       	sbci	r26, 0xFF	; 255
    1970:	b1 e0       	ldi	r27, 0x01	; 1
    1972:	3e d0       	rcall	.+124    	; 0x19f0 <__ultoa_invert+0x9c>
    1974:	b4 e0       	ldi	r27, 0x04	; 4
    1976:	3c d0       	rcall	.+120    	; 0x19f0 <__ultoa_invert+0x9c>
    1978:	67 0f       	add	r22, r23
    197a:	78 1f       	adc	r23, r24
    197c:	89 1f       	adc	r24, r25
    197e:	9a 1f       	adc	r25, r26
    1980:	a1 1d       	adc	r26, r1
    1982:	68 0f       	add	r22, r24
    1984:	79 1f       	adc	r23, r25
    1986:	8a 1f       	adc	r24, r26
    1988:	91 1d       	adc	r25, r1
    198a:	a1 1d       	adc	r26, r1
    198c:	6a 0f       	add	r22, r26
    198e:	71 1d       	adc	r23, r1
    1990:	81 1d       	adc	r24, r1
    1992:	91 1d       	adc	r25, r1
    1994:	a1 1d       	adc	r26, r1
    1996:	20 d0       	rcall	.+64     	; 0x19d8 <__ultoa_invert+0x84>
    1998:	09 f4       	brne	.+2      	; 0x199c <__ultoa_invert+0x48>
    199a:	68 94       	set
    199c:	3f 91       	pop	r19
    199e:	2a e0       	ldi	r18, 0x0A	; 10
    19a0:	26 9f       	mul	r18, r22
    19a2:	11 24       	eor	r1, r1
    19a4:	30 19       	sub	r19, r0
    19a6:	30 5d       	subi	r19, 0xD0	; 208
    19a8:	31 93       	st	Z+, r19
    19aa:	de f6       	brtc	.-74     	; 0x1962 <__ultoa_invert+0xe>
    19ac:	cf 01       	movw	r24, r30
    19ae:	08 95       	ret
    19b0:	46 2f       	mov	r20, r22
    19b2:	47 70       	andi	r20, 0x07	; 7
    19b4:	40 5d       	subi	r20, 0xD0	; 208
    19b6:	41 93       	st	Z+, r20
    19b8:	b3 e0       	ldi	r27, 0x03	; 3
    19ba:	0f d0       	rcall	.+30     	; 0x19da <__ultoa_invert+0x86>
    19bc:	c9 f7       	brne	.-14     	; 0x19b0 <__ultoa_invert+0x5c>
    19be:	f6 cf       	rjmp	.-20     	; 0x19ac <__ultoa_invert+0x58>
    19c0:	46 2f       	mov	r20, r22
    19c2:	4f 70       	andi	r20, 0x0F	; 15
    19c4:	40 5d       	subi	r20, 0xD0	; 208
    19c6:	4a 33       	cpi	r20, 0x3A	; 58
    19c8:	18 f0       	brcs	.+6      	; 0x19d0 <__ultoa_invert+0x7c>
    19ca:	49 5d       	subi	r20, 0xD9	; 217
    19cc:	31 fd       	sbrc	r19, 1
    19ce:	40 52       	subi	r20, 0x20	; 32
    19d0:	41 93       	st	Z+, r20
    19d2:	02 d0       	rcall	.+4      	; 0x19d8 <__ultoa_invert+0x84>
    19d4:	a9 f7       	brne	.-22     	; 0x19c0 <__ultoa_invert+0x6c>
    19d6:	ea cf       	rjmp	.-44     	; 0x19ac <__ultoa_invert+0x58>
    19d8:	b4 e0       	ldi	r27, 0x04	; 4
    19da:	a6 95       	lsr	r26
    19dc:	97 95       	ror	r25
    19de:	87 95       	ror	r24
    19e0:	77 95       	ror	r23
    19e2:	67 95       	ror	r22
    19e4:	ba 95       	dec	r27
    19e6:	c9 f7       	brne	.-14     	; 0x19da <__ultoa_invert+0x86>
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	61 05       	cpc	r22, r1
    19ec:	71 05       	cpc	r23, r1
    19ee:	08 95       	ret
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	0a 2e       	mov	r0, r26
    19f6:	06 94       	lsr	r0
    19f8:	57 95       	ror	r21
    19fa:	47 95       	ror	r20
    19fc:	37 95       	ror	r19
    19fe:	27 95       	ror	r18
    1a00:	ba 95       	dec	r27
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <__ultoa_invert+0xa2>
    1a04:	62 0f       	add	r22, r18
    1a06:	73 1f       	adc	r23, r19
    1a08:	84 1f       	adc	r24, r20
    1a0a:	95 1f       	adc	r25, r21
    1a0c:	a0 1d       	adc	r26, r0
    1a0e:	08 95       	ret

00001a10 <__prologue_saves__>:
    1a10:	2f 92       	push	r2
    1a12:	3f 92       	push	r3
    1a14:	4f 92       	push	r4
    1a16:	5f 92       	push	r5
    1a18:	6f 92       	push	r6
    1a1a:	7f 92       	push	r7
    1a1c:	8f 92       	push	r8
    1a1e:	9f 92       	push	r9
    1a20:	af 92       	push	r10
    1a22:	bf 92       	push	r11
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	ca 1b       	sub	r28, r26
    1a3a:	db 0b       	sbc	r29, r27
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	09 94       	ijmp

00001a48 <__epilogue_restores__>:
    1a48:	2a 88       	ldd	r2, Y+18	; 0x12
    1a4a:	39 88       	ldd	r3, Y+17	; 0x11
    1a4c:	48 88       	ldd	r4, Y+16	; 0x10
    1a4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1a5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a5e:	df 80       	ldd	r13, Y+7	; 0x07
    1a60:	ee 80       	ldd	r14, Y+6	; 0x06
    1a62:	fd 80       	ldd	r15, Y+5	; 0x05
    1a64:	0c 81       	ldd	r16, Y+4	; 0x04
    1a66:	1b 81       	ldd	r17, Y+3	; 0x03
    1a68:	aa 81       	ldd	r26, Y+2	; 0x02
    1a6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a6c:	ce 0f       	add	r28, r30
    1a6e:	d1 1d       	adc	r29, r1
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	ed 01       	movw	r28, r26
    1a7c:	08 95       	ret

00001a7e <_exit>:
    1a7e:	f8 94       	cli

00001a80 <__stop_program>:
    1a80:	ff cf       	rjmp	.-2      	; 0x1a80 <__stop_program>
